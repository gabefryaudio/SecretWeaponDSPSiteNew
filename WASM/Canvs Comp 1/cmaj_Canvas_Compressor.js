//==============================================================================
//
//  This file contains a Javascript/Webassembly/WebAudio export of the Cmajor
//  patch 'LUTCompressor_HQ_Envelope_WORKING.cmajorpatch'.
//
//  This file was auto-generated by the Cmajor toolkit v1.0.2926
//
//  To use it, import this module into your HTML/Javascript code and call
//  `createAudioWorkletNodePatchConnection()`. The AudioWorkletPatchConnection
//  object that is returned is a PatchConnection with some extra functionality
//  to let you connect it to web audio/MIDI.
//
//  For more details about Cmajor, visit https://cmajor.dev
//
//==============================================================================

import * as helpers from "./cmaj_api/cmaj-audio-worklet-helper.js"


//==============================================================================
/** This exports the patch's manifest, in case a caller needs to find out about its properties.
 */
export const manifest =
{
  "CmajorVersion": 1,
  "ID": "com.SecretWeaponDSP.canvascompressor.hqenvelope",
  "version": "1.0.0",
  "name": "Canvas Compressor",
  "description": "Compressor with customizeable compression curve",
  "category": "effect",
  "manufacturer": "SecretWeaponDSP",
  "isInstrument": false,
  "source": [
    "LUTCompressor_HQ_Envelope.cmajor"
  ],
  "view": {
    "src": "LUTCompressor_GUI_HQ.js",
    "width": 900,
    "height": 550
  }
};

/** Returns the patch's output endpoint list */
export function getOutputEndpoints() { return LUTCompressorMain.prototype.getOutputEndpoints(); }

/** Returns the patch's input endpoint list */
export function getInputEndpoints()  { return LUTCompressorMain.prototype.getInputEndpoints(); }

//==============================================================================
/**  Creates an audio worklet node for the patch with the given name, attaches it
 *   to the audio context provided, and returns an object containing the node
 *   and a PatchConnection class to control it.
 *
 *   @param {AudioContext} audioContext - a web audio AudioContext object
 *   @param {string} workletName - the name to give the new worklet that is created
 *   @returns {AudioWorkletPatchConnection} an AudioWorkletPatchConnection which has been initialised
 */
export async function createAudioWorkletNodePatchConnection (audioContext, workletName)
{
  const connection = new helpers.AudioWorkletPatchConnection (manifest);

  await connection.initialise ({ CmajorClass: LUTCompressorMain,
                                 audioContext,
                                 workletName,
                                 hostDescription: "WebAudio" });
  return connection;
}

/***********************************************************************************
 *
 *   A Javascript/Webassembly implementation of the Cmajor processor 'LUTCompressorMain'.
 *
 *   This class was auto-generated by the Cmajor toolkit.
 *
 *   To use it, construct an instance of this class, and call `initialise()` to
 *   asynchronously prepare it for use. Once initialised, the class provides
 *   appropriate setter/getter methods for reading/writing data to its endpoints,
 *   and an `advance()` method to render the next block.
 *
 *   This roughly mirrors functionality of the cmajor Performer API - see the
 *   C++ API classes and Cmajor docs for more information about how this is used.
 */
class LUTCompressorMain
{
  /** After constructing one of these objects, call its
   *  initialise() method to prepare it for use.
   */
  constructor()
  {
  }

  //==============================================================================
  /** Prepares this processor for use.
   *
   *  @param {number} sessionID - A unique integer ID which will be used for `processor.session`.
   *  @param {number} frequency - The frequency in Hz that the processor will be expected to run at.
   */
  async initialise (sessionID, frequency)
  {
    if (! ((sessionID ^ 0) > 1))
      throw new Error ("initialise() requires a valid non-zero session ID argument");

    if (! (frequency > 1))
      throw new Error ("initialise() requires a valid frequency argument");

    const isSIMDAvailable = WebAssembly.validate (new Uint8Array([0,97,115,109,1,0,0,0,1,5,1,96,0,1,123,3,2,1,0,10,10,1,8,0,65,0,253,15,253,98,11]));

    if (isSIMDAvailable)
      await this._initialiseInternalSIMD (sessionID, frequency);
    else
      await this._initialiseInternalNonSIMD (sessionID, frequency);

    return true;
  }

  //==============================================================================
  /** Advances the processor by a number of frames.
   *
   *  Before calling `advance()` you should use the appropriate functions to
   *  push data and events into the processor's input endpoints. After calling
   *  `advance()` you can use its output endpoint access functions to read the
   *  results.
   *
   *  @param {number} numFrames - An integer number of frames to advance.
   *                              This must be greater than zero.
   */
  advance (numFrames)
  {
    this._advanceInternal (numFrames);
  }

  //==============================================================================
  /** Returns an object which encapsulates the state of the patch at this point.
   *  The state can be restored by passing this object to `restoreState()`.
   */
  getState()
  {
    return { memory: this.byteMemory.slice(0) };
  }

  /** Restores the patch to a state that was previously saved by a call to `getState()`
   */
  restoreState (savedState)
  {
    if (savedState?.memory && savedState.memory?.length === this.byteMemory.length)
      this.byteMemory.set (savedState.memory);
    else
      throw Error ("restoreState(): not a valid state object");
  }

  /** Returns a list of the output endpoints that this processor exposes.
   *  @returns {Array}
   */
  getOutputEndpoints()
  {
    return [
      {
        "endpointID": "audioOut",
        "endpointType": "stream",
        "dataType": {
          "type": "vector",
          "element": {
            "type": "float32"
          },
          "size": 2
        },
        "purpose": "audio out",
        "numAudioChannels": 2
      },
      {
        "endpointID": "inputMeters",
        "endpointType": "event",
        "dataType": {
          "type": "vector",
          "element": {
            "type": "float32"
          },
          "size": 6
        },
        "annotation": {
          "name": "Input Meters"
        }
      },
      {
        "endpointID": "outputMeters",
        "endpointType": "event",
        "dataType": {
          "type": "vector",
          "element": {
            "type": "float32"
          },
          "size": 6
        },
        "annotation": {
          "name": "Output Meters"
        }
      },
      {
        "endpointID": "gainReductionMeter",
        "endpointType": "event",
        "dataType": {
          "type": "float32"
        },
        "annotation": {
          "name": "Gain Reduction"
        }
      }
    ];
  }

  /** Returns a list of the input endpoints that this processor exposes.
   *  @returns {Array}
   */
  getInputEndpoints()
  {
    return [
      {
        "endpointID": "audioIn",
        "endpointType": "stream",
        "dataType": {
          "type": "vector",
          "element": {
            "type": "float32"
          },
          "size": 2
        },
        "purpose": "audio in",
        "numAudioChannels": 2
      },
      {
        "endpointID": "inputGain",
        "endpointType": "event",
        "dataType": {
          "type": "float32"
        },
        "annotation": {
          "name": "Input Gain",
          "min": -20,
          "max": 20,
          "init": 0,
          "unit": "dB"
        },
        "purpose": "parameter"
      },
      {
        "endpointID": "makeupGain",
        "endpointType": "event",
        "dataType": {
          "type": "float32"
        },
        "annotation": {
          "name": "Makeup Gain",
          "min": -20,
          "max": 20,
          "init": 0,
          "unit": "dB"
        },
        "purpose": "parameter"
      },
      {
        "endpointID": "mix",
        "endpointType": "event",
        "dataType": {
          "type": "float32"
        },
        "annotation": {
          "name": "Mix",
          "min": 0,
          "max": 1,
          "init": 1
        },
        "purpose": "parameter"
      },
      {
        "endpointID": "attackBase",
        "endpointType": "event",
        "dataType": {
          "type": "float32"
        },
        "annotation": {
          "name": "Attack Base",
          "min": 0.1,
          "max": 100,
          "init": 5,
          "unit": "ms"
        },
        "purpose": "parameter"
      },
      {
        "endpointID": "releaseBase",
        "endpointType": "event",
        "dataType": {
          "type": "float32"
        },
        "annotation": {
          "name": "Release Base",
          "min": 1,
          "max": 1000,
          "init": 50,
          "unit": "ms"
        },
        "purpose": "parameter"
      },
      {
        "endpointID": "attackDepth",
        "endpointType": "event",
        "dataType": {
          "type": "float32"
        },
        "annotation": {
          "name": "Attack Depth",
          "min": -2,
          "max": 2,
          "init": 0.5
        },
        "purpose": "parameter"
      },
      {
        "endpointID": "releaseDepth",
        "endpointType": "event",
        "dataType": {
          "type": "float32"
        },
        "annotation": {
          "name": "Release Depth",
          "min": -2,
          "max": 2,
          "init": 1
        },
        "purpose": "parameter"
      },
      {
        "endpointID": "comp0x",
        "endpointType": "event",
        "dataType": {
          "type": "float32"
        },
        "annotation": {
          "name": "Point 1 Input",
          "min": -60,
          "max": 0,
          "init": -60,
          "unit": "dB"
        },
        "purpose": "parameter"
      },
      {
        "endpointID": "comp0y",
        "endpointType": "event",
        "dataType": {
          "type": "float32"
        },
        "annotation": {
          "name": "Point 1 Output",
          "min": -60,
          "max": 0,
          "init": -60,
          "unit": "dB"
        },
        "purpose": "parameter"
      },
      {
        "endpointID": "comp1x",
        "endpointType": "event",
        "dataType": {
          "type": "float32"
        },
        "annotation": {
          "name": "Point 2 Input",
          "min": -60,
          "max": 0,
          "init": -50,
          "unit": "dB"
        },
        "purpose": "parameter"
      },
      {
        "endpointID": "comp1y",
        "endpointType": "event",
        "dataType": {
          "type": "float32"
        },
        "annotation": {
          "name": "Point 2 Output",
          "min": -60,
          "max": 0,
          "init": -52,
          "unit": "dB"
        },
        "purpose": "parameter"
      },
      {
        "endpointID": "comp2x",
        "endpointType": "event",
        "dataType": {
          "type": "float32"
        },
        "annotation": {
          "name": "Point 3 Input",
          "min": -60,
          "max": 0,
          "init": -40,
          "unit": "dB"
        },
        "purpose": "parameter"
      },
      {
        "endpointID": "comp2y",
        "endpointType": "event",
        "dataType": {
          "type": "float32"
        },
        "annotation": {
          "name": "Point 3 Output",
          "min": -60,
          "max": 0,
          "init": -45,
          "unit": "dB"
        },
        "purpose": "parameter"
      },
      {
        "endpointID": "comp3x",
        "endpointType": "event",
        "dataType": {
          "type": "float32"
        },
        "annotation": {
          "name": "Point 4 Input",
          "min": -60,
          "max": 0,
          "init": -30,
          "unit": "dB"
        },
        "purpose": "parameter"
      },
      {
        "endpointID": "comp3y",
        "endpointType": "event",
        "dataType": {
          "type": "float32"
        },
        "annotation": {
          "name": "Point 4 Output",
          "min": -60,
          "max": 0,
          "init": -37,
          "unit": "dB"
        },
        "purpose": "parameter"
      },
      {
        "endpointID": "comp4x",
        "endpointType": "event",
        "dataType": {
          "type": "float32"
        },
        "annotation": {
          "name": "Point 5 Input",
          "min": -60,
          "max": 0,
          "init": -20,
          "unit": "dB"
        },
        "purpose": "parameter"
      },
      {
        "endpointID": "comp4y",
        "endpointType": "event",
        "dataType": {
          "type": "float32"
        },
        "annotation": {
          "name": "Point 5 Output",
          "min": -60,
          "max": 0,
          "init": -30,
          "unit": "dB"
        },
        "purpose": "parameter"
      },
      {
        "endpointID": "comp5x",
        "endpointType": "event",
        "dataType": {
          "type": "float32"
        },
        "annotation": {
          "name": "Point 6 Input",
          "min": -60,
          "max": 0,
          "init": -10,
          "unit": "dB"
        },
        "purpose": "parameter"
      },
      {
        "endpointID": "comp5y",
        "endpointType": "event",
        "dataType": {
          "type": "float32"
        },
        "annotation": {
          "name": "Point 6 Output",
          "min": -60,
          "max": 0,
          "init": -22,
          "unit": "dB"
        },
        "purpose": "parameter"
      },
      {
        "endpointID": "comp6x",
        "endpointType": "event",
        "dataType": {
          "type": "float32"
        },
        "annotation": {
          "name": "Point 7 Input",
          "min": -60,
          "max": 0,
          "init": -5,
          "unit": "dB"
        },
        "purpose": "parameter"
      },
      {
        "endpointID": "comp6y",
        "endpointType": "event",
        "dataType": {
          "type": "float32"
        },
        "annotation": {
          "name": "Point 7 Output",
          "min": -60,
          "max": 0,
          "init": -15,
          "unit": "dB"
        },
        "purpose": "parameter"
      },
      {
        "endpointID": "comp7x",
        "endpointType": "event",
        "dataType": {
          "type": "float32"
        },
        "annotation": {
          "name": "Point 8 Input",
          "min": -60,
          "max": 0,
          "init": 0,
          "unit": "dB"
        },
        "purpose": "parameter"
      },
      {
        "endpointID": "comp7y",
        "endpointType": "event",
        "dataType": {
          "type": "float32"
        },
        "annotation": {
          "name": "Point 8 Output",
          "min": -60,
          "max": 0,
          "init": -10,
          "unit": "dB"
        },
        "purpose": "parameter"
      },
      {
        "endpointID": "waveshaperAmount",
        "endpointType": "event",
        "dataType": {
          "type": "float32"
        },
        "annotation": {
          "name": "Waveshaper Mix",
          "min": 0,
          "max": 1,
          "init": 0
        },
        "purpose": "parameter"
      },
      {
        "endpointID": "wave0x",
        "endpointType": "event",
        "dataType": {
          "type": "float32"
        },
        "annotation": {
          "name": "Wave Point 1 X",
          "min": -1,
          "max": 1,
          "init": -1
        },
        "purpose": "parameter"
      },
      {
        "endpointID": "wave0y",
        "endpointType": "event",
        "dataType": {
          "type": "float32"
        },
        "annotation": {
          "name": "Wave Point 1 Y",
          "min": -1,
          "max": 1,
          "init": -1
        },
        "purpose": "parameter"
      },
      {
        "endpointID": "wave1x",
        "endpointType": "event",
        "dataType": {
          "type": "float32"
        },
        "annotation": {
          "name": "Wave Point 2 X",
          "min": -1,
          "max": 1,
          "init": -0.7
        },
        "purpose": "parameter"
      },
      {
        "endpointID": "wave1y",
        "endpointType": "event",
        "dataType": {
          "type": "float32"
        },
        "annotation": {
          "name": "Wave Point 2 Y",
          "min": -1,
          "max": 1,
          "init": -0.7
        },
        "purpose": "parameter"
      },
      {
        "endpointID": "wave2x",
        "endpointType": "event",
        "dataType": {
          "type": "float32"
        },
        "annotation": {
          "name": "Wave Point 3 X",
          "min": -1,
          "max": 1,
          "init": -0.5
        },
        "purpose": "parameter"
      },
      {
        "endpointID": "wave2y",
        "endpointType": "event",
        "dataType": {
          "type": "float32"
        },
        "annotation": {
          "name": "Wave Point 3 Y",
          "min": -1,
          "max": 1,
          "init": -0.5
        },
        "purpose": "parameter"
      },
      {
        "endpointID": "wave3x",
        "endpointType": "event",
        "dataType": {
          "type": "float32"
        },
        "annotation": {
          "name": "Wave Point 4 X",
          "min": -1,
          "max": 1,
          "init": -0.3
        },
        "purpose": "parameter"
      },
      {
        "endpointID": "wave3y",
        "endpointType": "event",
        "dataType": {
          "type": "float32"
        },
        "annotation": {
          "name": "Wave Point 4 Y",
          "min": -1,
          "max": 1,
          "init": -0.3
        },
        "purpose": "parameter"
      },
      {
        "endpointID": "wave4x",
        "endpointType": "event",
        "dataType": {
          "type": "float32"
        },
        "annotation": {
          "name": "Wave Point 5 X",
          "min": -1,
          "max": 1,
          "init": 0.3
        },
        "purpose": "parameter"
      },
      {
        "endpointID": "wave4y",
        "endpointType": "event",
        "dataType": {
          "type": "float32"
        },
        "annotation": {
          "name": "Wave Point 5 Y",
          "min": -1,
          "max": 1,
          "init": 0.3
        },
        "purpose": "parameter"
      },
      {
        "endpointID": "wave5x",
        "endpointType": "event",
        "dataType": {
          "type": "float32"
        },
        "annotation": {
          "name": "Wave Point 6 X",
          "min": -1,
          "max": 1,
          "init": 0.5
        },
        "purpose": "parameter"
      },
      {
        "endpointID": "wave5y",
        "endpointType": "event",
        "dataType": {
          "type": "float32"
        },
        "annotation": {
          "name": "Wave Point 6 Y",
          "min": -1,
          "max": 1,
          "init": 0.5
        },
        "purpose": "parameter"
      },
      {
        "endpointID": "wave6x",
        "endpointType": "event",
        "dataType": {
          "type": "float32"
        },
        "annotation": {
          "name": "Wave Point 7 X",
          "min": -1,
          "max": 1,
          "init": 0.7
        },
        "purpose": "parameter"
      },
      {
        "endpointID": "wave6y",
        "endpointType": "event",
        "dataType": {
          "type": "float32"
        },
        "annotation": {
          "name": "Wave Point 7 Y",
          "min": -1,
          "max": 1,
          "init": 0.7
        },
        "purpose": "parameter"
      },
      {
        "endpointID": "wave7x",
        "endpointType": "event",
        "dataType": {
          "type": "float32"
        },
        "annotation": {
          "name": "Wave Point 8 X",
          "min": -1,
          "max": 1,
          "init": 1
        },
        "purpose": "parameter"
      },
      {
        "endpointID": "wave7y",
        "endpointType": "event",
        "dataType": {
          "type": "float32"
        },
        "annotation": {
          "name": "Wave Point 8 Y",
          "min": -1,
          "max": 1,
          "init": 1
        },
        "purpose": "parameter"
      }
    ];
  }

  /** Stores frames for the input to endpoint "audioIn"
   *
   * @param {Array} sourceChannelArrays - An array of channel arrays to read
   * @param {number} numFramesToWrite   - The number of frames to copy
   * @param {number} sourceChannel      - The source channel to copy from
   */
  setInputStreamFrames_audioIn (sourceChannelArrays, numFramesToWrite, sourceChannel)
  {
    this._setInputFramesInternal_audioIn (sourceChannelArrays, numFramesToWrite, sourceChannel);
  }

  /** Sends an event of type `float32` to endpoint "inputGain".
   *  @param {number} eventValue - The event to be added to the queue for this endpoint.
   */
  sendInputEvent_inputGain (eventValue)
  {
    this.instance.exports._sendEvent_inputGain (this.stateAddress, eventValue);
  }

  /** Sends an event of type `float32` to endpoint "makeupGain".
   *  @param {number} eventValue - The event to be added to the queue for this endpoint.
   */
  sendInputEvent_makeupGain (eventValue)
  {
    this.instance.exports._sendEvent_makeupGain (this.stateAddress, eventValue);
  }

  /** Sends an event of type `float32` to endpoint "mix".
   *  @param {number} eventValue - The event to be added to the queue for this endpoint.
   */
  sendInputEvent_mix (eventValue)
  {
    this.instance.exports._sendEvent_mix (this.stateAddress, eventValue);
  }

  /** Sends an event of type `float32` to endpoint "attackBase".
   *  @param {number} eventValue - The event to be added to the queue for this endpoint.
   */
  sendInputEvent_attackBase (eventValue)
  {
    this.instance.exports._sendEvent_attackBase (this.stateAddress, eventValue);
  }

  /** Sends an event of type `float32` to endpoint "releaseBase".
   *  @param {number} eventValue - The event to be added to the queue for this endpoint.
   */
  sendInputEvent_releaseBase (eventValue)
  {
    this.instance.exports._sendEvent_releaseBase (this.stateAddress, eventValue);
  }

  /** Sends an event of type `float32` to endpoint "attackDepth".
   *  @param {number} eventValue - The event to be added to the queue for this endpoint.
   */
  sendInputEvent_attackDepth (eventValue)
  {
    this.instance.exports._sendEvent_attackDepth (this.stateAddress, eventValue);
  }

  /** Sends an event of type `float32` to endpoint "releaseDepth".
   *  @param {number} eventValue - The event to be added to the queue for this endpoint.
   */
  sendInputEvent_releaseDepth (eventValue)
  {
    this.instance.exports._sendEvent_releaseDepth (this.stateAddress, eventValue);
  }

  /** Sends an event of type `float32` to endpoint "comp0x".
   *  @param {number} eventValue - The event to be added to the queue for this endpoint.
   */
  sendInputEvent_comp0x (eventValue)
  {
    this.instance.exports._sendEvent_comp0x (this.stateAddress, eventValue);
  }

  /** Sends an event of type `float32` to endpoint "comp0y".
   *  @param {number} eventValue - The event to be added to the queue for this endpoint.
   */
  sendInputEvent_comp0y (eventValue)
  {
    this.instance.exports._sendEvent_comp0y (this.stateAddress, eventValue);
  }

  /** Sends an event of type `float32` to endpoint "comp1x".
   *  @param {number} eventValue - The event to be added to the queue for this endpoint.
   */
  sendInputEvent_comp1x (eventValue)
  {
    this.instance.exports._sendEvent_comp1x (this.stateAddress, eventValue);
  }

  /** Sends an event of type `float32` to endpoint "comp1y".
   *  @param {number} eventValue - The event to be added to the queue for this endpoint.
   */
  sendInputEvent_comp1y (eventValue)
  {
    this.instance.exports._sendEvent_comp1y (this.stateAddress, eventValue);
  }

  /** Sends an event of type `float32` to endpoint "comp2x".
   *  @param {number} eventValue - The event to be added to the queue for this endpoint.
   */
  sendInputEvent_comp2x (eventValue)
  {
    this.instance.exports._sendEvent_comp2x (this.stateAddress, eventValue);
  }

  /** Sends an event of type `float32` to endpoint "comp2y".
   *  @param {number} eventValue - The event to be added to the queue for this endpoint.
   */
  sendInputEvent_comp2y (eventValue)
  {
    this.instance.exports._sendEvent_comp2y (this.stateAddress, eventValue);
  }

  /** Sends an event of type `float32` to endpoint "comp3x".
   *  @param {number} eventValue - The event to be added to the queue for this endpoint.
   */
  sendInputEvent_comp3x (eventValue)
  {
    this.instance.exports._sendEvent_comp3x (this.stateAddress, eventValue);
  }

  /** Sends an event of type `float32` to endpoint "comp3y".
   *  @param {number} eventValue - The event to be added to the queue for this endpoint.
   */
  sendInputEvent_comp3y (eventValue)
  {
    this.instance.exports._sendEvent_comp3y (this.stateAddress, eventValue);
  }

  /** Sends an event of type `float32` to endpoint "comp4x".
   *  @param {number} eventValue - The event to be added to the queue for this endpoint.
   */
  sendInputEvent_comp4x (eventValue)
  {
    this.instance.exports._sendEvent_comp4x (this.stateAddress, eventValue);
  }

  /** Sends an event of type `float32` to endpoint "comp4y".
   *  @param {number} eventValue - The event to be added to the queue for this endpoint.
   */
  sendInputEvent_comp4y (eventValue)
  {
    this.instance.exports._sendEvent_comp4y (this.stateAddress, eventValue);
  }

  /** Sends an event of type `float32` to endpoint "comp5x".
   *  @param {number} eventValue - The event to be added to the queue for this endpoint.
   */
  sendInputEvent_comp5x (eventValue)
  {
    this.instance.exports._sendEvent_comp5x (this.stateAddress, eventValue);
  }

  /** Sends an event of type `float32` to endpoint "comp5y".
   *  @param {number} eventValue - The event to be added to the queue for this endpoint.
   */
  sendInputEvent_comp5y (eventValue)
  {
    this.instance.exports._sendEvent_comp5y (this.stateAddress, eventValue);
  }

  /** Sends an event of type `float32` to endpoint "comp6x".
   *  @param {number} eventValue - The event to be added to the queue for this endpoint.
   */
  sendInputEvent_comp6x (eventValue)
  {
    this.instance.exports._sendEvent_comp6x (this.stateAddress, eventValue);
  }

  /** Sends an event of type `float32` to endpoint "comp6y".
   *  @param {number} eventValue - The event to be added to the queue for this endpoint.
   */
  sendInputEvent_comp6y (eventValue)
  {
    this.instance.exports._sendEvent_comp6y (this.stateAddress, eventValue);
  }

  /** Sends an event of type `float32` to endpoint "comp7x".
   *  @param {number} eventValue - The event to be added to the queue for this endpoint.
   */
  sendInputEvent_comp7x (eventValue)
  {
    this.instance.exports._sendEvent_comp7x (this.stateAddress, eventValue);
  }

  /** Sends an event of type `float32` to endpoint "comp7y".
   *  @param {number} eventValue - The event to be added to the queue for this endpoint.
   */
  sendInputEvent_comp7y (eventValue)
  {
    this.instance.exports._sendEvent_comp7y (this.stateAddress, eventValue);
  }

  /** Sends an event of type `float32` to endpoint "waveshaperAmount".
   *  @param {number} eventValue - The event to be added to the queue for this endpoint.
   */
  sendInputEvent_waveshaperAmount (eventValue)
  {
    this.instance.exports._sendEvent_waveshaperAmount (this.stateAddress, eventValue);
  }

  /** Sends an event of type `float32` to endpoint "wave0x".
   *  @param {number} eventValue - The event to be added to the queue for this endpoint.
   */
  sendInputEvent_wave0x (eventValue)
  {
    this.instance.exports._sendEvent_wave0x (this.stateAddress, eventValue);
  }

  /** Sends an event of type `float32` to endpoint "wave0y".
   *  @param {number} eventValue - The event to be added to the queue for this endpoint.
   */
  sendInputEvent_wave0y (eventValue)
  {
    this.instance.exports._sendEvent_wave0y (this.stateAddress, eventValue);
  }

  /** Sends an event of type `float32` to endpoint "wave1x".
   *  @param {number} eventValue - The event to be added to the queue for this endpoint.
   */
  sendInputEvent_wave1x (eventValue)
  {
    this.instance.exports._sendEvent_wave1x (this.stateAddress, eventValue);
  }

  /** Sends an event of type `float32` to endpoint "wave1y".
   *  @param {number} eventValue - The event to be added to the queue for this endpoint.
   */
  sendInputEvent_wave1y (eventValue)
  {
    this.instance.exports._sendEvent_wave1y (this.stateAddress, eventValue);
  }

  /** Sends an event of type `float32` to endpoint "wave2x".
   *  @param {number} eventValue - The event to be added to the queue for this endpoint.
   */
  sendInputEvent_wave2x (eventValue)
  {
    this.instance.exports._sendEvent_wave2x (this.stateAddress, eventValue);
  }

  /** Sends an event of type `float32` to endpoint "wave2y".
   *  @param {number} eventValue - The event to be added to the queue for this endpoint.
   */
  sendInputEvent_wave2y (eventValue)
  {
    this.instance.exports._sendEvent_wave2y (this.stateAddress, eventValue);
  }

  /** Sends an event of type `float32` to endpoint "wave3x".
   *  @param {number} eventValue - The event to be added to the queue for this endpoint.
   */
  sendInputEvent_wave3x (eventValue)
  {
    this.instance.exports._sendEvent_wave3x (this.stateAddress, eventValue);
  }

  /** Sends an event of type `float32` to endpoint "wave3y".
   *  @param {number} eventValue - The event to be added to the queue for this endpoint.
   */
  sendInputEvent_wave3y (eventValue)
  {
    this.instance.exports._sendEvent_wave3y (this.stateAddress, eventValue);
  }

  /** Sends an event of type `float32` to endpoint "wave4x".
   *  @param {number} eventValue - The event to be added to the queue for this endpoint.
   */
  sendInputEvent_wave4x (eventValue)
  {
    this.instance.exports._sendEvent_wave4x (this.stateAddress, eventValue);
  }

  /** Sends an event of type `float32` to endpoint "wave4y".
   *  @param {number} eventValue - The event to be added to the queue for this endpoint.
   */
  sendInputEvent_wave4y (eventValue)
  {
    this.instance.exports._sendEvent_wave4y (this.stateAddress, eventValue);
  }

  /** Sends an event of type `float32` to endpoint "wave5x".
   *  @param {number} eventValue - The event to be added to the queue for this endpoint.
   */
  sendInputEvent_wave5x (eventValue)
  {
    this.instance.exports._sendEvent_wave5x (this.stateAddress, eventValue);
  }

  /** Sends an event of type `float32` to endpoint "wave5y".
   *  @param {number} eventValue - The event to be added to the queue for this endpoint.
   */
  sendInputEvent_wave5y (eventValue)
  {
    this.instance.exports._sendEvent_wave5y (this.stateAddress, eventValue);
  }

  /** Sends an event of type `float32` to endpoint "wave6x".
   *  @param {number} eventValue - The event to be added to the queue for this endpoint.
   */
  sendInputEvent_wave6x (eventValue)
  {
    this.instance.exports._sendEvent_wave6x (this.stateAddress, eventValue);
  }

  /** Sends an event of type `float32` to endpoint "wave6y".
   *  @param {number} eventValue - The event to be added to the queue for this endpoint.
   */
  sendInputEvent_wave6y (eventValue)
  {
    this.instance.exports._sendEvent_wave6y (this.stateAddress, eventValue);
  }

  /** Sends an event of type `float32` to endpoint "wave7x".
   *  @param {number} eventValue - The event to be added to the queue for this endpoint.
   */
  sendInputEvent_wave7x (eventValue)
  {
    this.instance.exports._sendEvent_wave7x (this.stateAddress, eventValue);
  }

  /** Sends an event of type `float32` to endpoint "wave7y".
   *  @param {number} eventValue - The event to be added to the queue for this endpoint.
   */
  sendInputEvent_wave7y (eventValue)
  {
    this.instance.exports._sendEvent_wave7y (this.stateAddress, eventValue);
  }

  /** Returns a frame from the output stream "audioOut"
   *
   * @param {number} frameIndex - the index of the frame to fetch
   */
  getOutputFrame_audioOut (frameIndex)
  {
    return this._getOutputFrameInternal_audioOut (frameIndex);
  }

  /** Copies frames from the output stream "audioOut" into a destination array.
   *
   * @param {Array} destChannelArrays   - An array of arrays (one per channel) into
   *                                      which the samples will be copied
   * @param {number} maxNumFramesToRead - The maximum number of frames to copy
   * @param {number} destChannel        - The channel to start writing from
   */
  getOutputFrames_audioOut (destChannelArrays, maxNumFramesToRead, destChannel)
  {
    this._getOutputFramesInternal_audioOut (destChannelArrays, maxNumFramesToRead, destChannel);
  }

  /** Returns the number of events available for endpoint "inputMeters" */
  getOutputEventCount_inputMeters()
  {
    return this._unpackEventCountInternal_inputMeters();
  }

  /** Resets the FIFO for event endpoint "inputMeters" */
  resetOutputEventCount_inputMeters()
  {
    this._resetEventCountInternal_inputMeters();
  }

  /** Returns one of the events from the FIFO for endpoint "inputMeters"
   *  @param {number} index - The index of the event to return
  */
  getOutputEvent_inputMeters (index)
  {
    return this._readEventInternal_inputMeters (index);
  }

  /** Returns the number of events available for endpoint "outputMeters" */
  getOutputEventCount_outputMeters()
  {
    return this._unpackEventCountInternal_outputMeters();
  }

  /** Resets the FIFO for event endpoint "outputMeters" */
  resetOutputEventCount_outputMeters()
  {
    this._resetEventCountInternal_outputMeters();
  }

  /** Returns one of the events from the FIFO for endpoint "outputMeters"
   *  @param {number} index - The index of the event to return
  */
  getOutputEvent_outputMeters (index)
  {
    return this._readEventInternal_outputMeters (index);
  }

  /** Returns the number of events available for endpoint "gainReductionMeter" */
  getOutputEventCount_gainReductionMeter()
  {
    return this._unpackEventCountInternal_gainReductionMeter();
  }

  /** Resets the FIFO for event endpoint "gainReductionMeter" */
  resetOutputEventCount_gainReductionMeter()
  {
    this._resetEventCountInternal_gainReductionMeter();
  }

  /** Returns one of the events from the FIFO for endpoint "gainReductionMeter"
   *  @param {number} index - The index of the event to return
  */
  getOutputEvent_gainReductionMeter (index)
  {
    return this._readEventInternal_gainReductionMeter (index);
  }

  //==============================================================================
  // Code beyond this point is private internal implementation detail

  //==============================================================================
  /** @access private */
  async _initialiseInternalSIMD (sessionID, frequency)
  {
    this.stateAddress = 5255584;
    this.scratchSpaceAddress = 5480304;

    const memory = new WebAssembly.Memory ({ initial: 85 });
    const stack = new WebAssembly.Global ({ value: "i32", mutable: true }, 5255584);
    const imports = {
      env: {
        __linear_memory: memory,
        __memory_base: 0,
        __stack_pointer: stack,
        __table_base: 0,
        memcpy:  (dst, src, len) => { this.byteMemory.copyWithin (dst, src, src + len); return dst; },
        memmove: (dst, src, len) => { this.byteMemory.copyWithin (dst, src, src + len); return dst; },
        memset:  (dst, value, len) => { this.byteMemory.fill (value, dst, dst + len); return dst; }
      },
    };

    const result = await WebAssembly.instantiate (this._getWasmBytesSIMD(), imports);
    this.instance = result.instance;
    const exports = this.instance.exports;
    const memoryBuffer = exports.memory?.buffer || memory.buffer;
    const memoryDataView = new DataView (memoryBuffer);
    const byteMemory = new Uint8Array (memoryBuffer);
    this.byteMemory = byteMemory;
    this.memoryDataView = memoryDataView;

    exports.initialise?.(this.stateAddress, this.scratchSpaceAddress, sessionID, frequency);

    const advanceFn = exports.advanceBlock ? ((numFrames) => exports.advanceBlock (5255584, 5472112, numFrames))
                                           : (() => exports.advanceOneFrame (5255584, 5472112));

    this.reset = () => {
       byteMemory.fill (0, 5255584, 5472112);
       byteMemory.fill (0, 5480304, 5480304 + 4);
       exports.initialise?.(this.stateAddress, this.scratchSpaceAddress, sessionID, frequency);
    };

    this._advanceInternal = (numFrames) => {
      byteMemory.fill (0, 5476208, 5476208 + numFrames * 8);
      advanceFn (numFrames);
    };

    this._setInputFramesInternal_audioIn = (sourceChannelArrays, numFramesToWrite, sourceChannel) => {
      try
      {
        if (numFramesToWrite > 512)
          numFramesToWrite = 512;

        const channelsToCopy = Math.min (2, sourceChannelArrays.length - sourceChannel);
        let dest = 5472112;

        for (let frame = 0; frame < numFramesToWrite; ++frame)
        {
          for (let channel = 0; channel < channelsToCopy; ++channel)
            this._pack_f32 (dest + 4 * channel, sourceChannelArrays[sourceChannel + channel][frame]);

          dest += 8;
        }
      }
      catch (error)
      {
        // Sometimes, often at startup, Web Audio provides an empty buffer - causing TypeError on attempt to dereference
        if (! (error instanceof TypeError))
          throw (error);
      }
    };

    this._getOutputFrameInternal_audioOut = (frameIndex) => { return this._unpack_V2_f32 (5476208 + frameIndex * 8); };

    this._getOutputFramesInternal_audioOut = (destChannelArrays, maxNumFramesToRead, destChannel) => {
      if (maxNumFramesToRead > 512)
        maxNumFramesToRead = 512;

      const channelsToCopy = Math.min (2, destChannelArrays.length - destChannel);
      let source = 5476208;

      for (let frame = 0; frame < maxNumFramesToRead; ++frame)
      {
        for (let channel = 0; channel < channelsToCopy; ++channel)
          destChannelArrays[destChannel + channel][frame] = memoryDataView.getFloat32 (source + 4 * channel, true);

        source += 8;
      }
    };

    this._unpackEventCountInternal_inputMeters = () => { return memoryDataView.getInt32 (5467560, true); };
    this._resetEventCountInternal_inputMeters = () => { memoryDataView.setInt32 (5467560, 0, true); };

    this._readEventInternal_inputMeters = (index) => {
      const eventAddress = 5467584 + (64 * index);
      const frame = memoryDataView.getInt32 (eventAddress, true);
      return { frame, typeIndex: 0, event: this._unpack_V6_f32 (eventAddress + 32) };
    };

    this._unpackEventCountInternal_outputMeters = () => { return memoryDataView.getInt32 (5469632, true); };
    this._resetEventCountInternal_outputMeters = () => { memoryDataView.setInt32 (5469632, 0, true); };

    this._readEventInternal_outputMeters = (index) => {
      const eventAddress = 5469664 + (64 * index);
      const frame = memoryDataView.getInt32 (eventAddress, true);
      return { frame, typeIndex: 0, event: this._unpack_V6_f32 (eventAddress + 32) };
    };

    this._unpackEventCountInternal_gainReductionMeter = () => { return memoryDataView.getInt32 (5471712, true); };
    this._resetEventCountInternal_gainReductionMeter = () => { memoryDataView.setInt32 (5471712, 0, true); };

    this._readEventInternal_gainReductionMeter = (index) => {
      const eventAddress = 5471716 + (12 * index);
      const frame = memoryDataView.getInt32 (eventAddress, true);
      return { frame, typeIndex: 0, event: memoryDataView.getFloat32 (eventAddress + 8, true) };
    };

    this._pack_f32 = (address, newValue) => {
      memoryDataView.setFloat32 (address, newValue, true);
    };

    this._unpack_V2_f32 = (address) => {
      return [memoryDataView.getFloat32 (address, true), memoryDataView.getFloat32 (address + 4, true)];
    };

    this._unpack_V6_f32 = (address) => {
      return [memoryDataView.getFloat32 (address, true), memoryDataView.getFloat32 (address + 4, true), memoryDataView.getFloat32 (address + 8, true), memoryDataView.getFloat32 (address + 12, true), memoryDataView.getFloat32 (address + 16, true), memoryDataView.getFloat32 (address + 20, true)];
    };
  }

  //==============================================================================
  /** @access private */
  async _initialiseInternalNonSIMD (sessionID, frequency)
  {
    this.stateAddress = 5255568;
    this.scratchSpaceAddress = 5480288;

    const memory = new WebAssembly.Memory ({ initial: 85 });
    const stack = new WebAssembly.Global ({ value: "i32", mutable: true }, 5255568);
    const imports = {
      env: {
        __linear_memory: memory,
        __memory_base: 0,
        __stack_pointer: stack,
        __table_base: 0,
        memcpy:  (dst, src, len) => { this.byteMemory.copyWithin (dst, src, src + len); return dst; },
        memmove: (dst, src, len) => { this.byteMemory.copyWithin (dst, src, src + len); return dst; },
        memset:  (dst, value, len) => { this.byteMemory.fill (value, dst, dst + len); return dst; }
      },
    };

    const result = await WebAssembly.instantiate (this._getWasmBytesNonSIMD(), imports);
    this.instance = result.instance;
    const exports = this.instance.exports;
    const memoryBuffer = exports.memory?.buffer || memory.buffer;
    const memoryDataView = new DataView (memoryBuffer);
    const byteMemory = new Uint8Array (memoryBuffer);
    this.byteMemory = byteMemory;
    this.memoryDataView = memoryDataView;

    exports.initialise?.(this.stateAddress, this.scratchSpaceAddress, sessionID, frequency);

    const advanceFn = exports.advanceBlock ? ((numFrames) => exports.advanceBlock (5255568, 5472096, numFrames))
                                           : (() => exports.advanceOneFrame (5255568, 5472096));

    this.reset = () => {
       byteMemory.fill (0, 5255568, 5472096);
       byteMemory.fill (0, 5480288, 5480288 + 4);
       exports.initialise?.(this.stateAddress, this.scratchSpaceAddress, sessionID, frequency);
    };

    this._advanceInternal = (numFrames) => {
      byteMemory.fill (0, 5476192, 5476192 + numFrames * 8);
      advanceFn (numFrames);
    };

    this._setInputFramesInternal_audioIn = (sourceChannelArrays, numFramesToWrite, sourceChannel) => {
      try
      {
        if (numFramesToWrite > 512)
          numFramesToWrite = 512;

        const channelsToCopy = Math.min (2, sourceChannelArrays.length - sourceChannel);
        let dest = 5472096;

        for (let frame = 0; frame < numFramesToWrite; ++frame)
        {
          for (let channel = 0; channel < channelsToCopy; ++channel)
            this._pack_f32 (dest + 4 * channel, sourceChannelArrays[sourceChannel + channel][frame]);

          dest += 8;
        }
      }
      catch (error)
      {
        // Sometimes, often at startup, Web Audio provides an empty buffer - causing TypeError on attempt to dereference
        if (! (error instanceof TypeError))
          throw (error);
      }
    };

    this._getOutputFrameInternal_audioOut = (frameIndex) => { return this._unpack_V2_f32 (5476192 + frameIndex * 8); };

    this._getOutputFramesInternal_audioOut = (destChannelArrays, maxNumFramesToRead, destChannel) => {
      if (maxNumFramesToRead > 512)
        maxNumFramesToRead = 512;

      const channelsToCopy = Math.min (2, destChannelArrays.length - destChannel);
      let source = 5476192;

      for (let frame = 0; frame < maxNumFramesToRead; ++frame)
      {
        for (let channel = 0; channel < channelsToCopy; ++channel)
          destChannelArrays[destChannel + channel][frame] = memoryDataView.getFloat32 (source + 4 * channel, true);

        source += 8;
      }
    };

    this._unpackEventCountInternal_inputMeters = () => { return memoryDataView.getInt32 (5467544, true); };
    this._resetEventCountInternal_inputMeters = () => { memoryDataView.setInt32 (5467544, 0, true); };

    this._readEventInternal_inputMeters = (index) => {
      const eventAddress = 5467568 + (64 * index);
      const frame = memoryDataView.getInt32 (eventAddress, true);
      return { frame, typeIndex: 0, event: this._unpack_V6_f32 (eventAddress + 32) };
    };

    this._unpackEventCountInternal_outputMeters = () => { return memoryDataView.getInt32 (5469616, true); };
    this._resetEventCountInternal_outputMeters = () => { memoryDataView.setInt32 (5469616, 0, true); };

    this._readEventInternal_outputMeters = (index) => {
      const eventAddress = 5469648 + (64 * index);
      const frame = memoryDataView.getInt32 (eventAddress, true);
      return { frame, typeIndex: 0, event: this._unpack_V6_f32 (eventAddress + 32) };
    };

    this._unpackEventCountInternal_gainReductionMeter = () => { return memoryDataView.getInt32 (5471696, true); };
    this._resetEventCountInternal_gainReductionMeter = () => { memoryDataView.setInt32 (5471696, 0, true); };

    this._readEventInternal_gainReductionMeter = (index) => {
      const eventAddress = 5471700 + (12 * index);
      const frame = memoryDataView.getInt32 (eventAddress, true);
      return { frame, typeIndex: 0, event: memoryDataView.getFloat32 (eventAddress + 8, true) };
    };

    this._pack_f32 = (address, newValue) => {
      memoryDataView.setFloat32 (address, newValue, true);
    };

    this._unpack_V2_f32 = (address) => {
      return [memoryDataView.getFloat32 (address, true), memoryDataView.getFloat32 (address + 4, true)];
    };

    this._unpack_V6_f32 = (address) => {
      return [memoryDataView.getFloat32 (address, true), memoryDataView.getFloat32 (address + 4, true), memoryDataView.getFloat32 (address + 8, true), memoryDataView.getFloat32 (address + 12, true), memoryDataView.getFloat32 (address + 16, true), memoryDataView.getFloat32 (address + 20, true)];
    };
  }

  /** @access private */
  _getWasmBytesSIMD()
  {
    return new Uint8Array([0,97,115,109,1,0,0,0,1,164,128,128,128,0,6,96,2,127,125,0,96,4,127,127,127,124,0,96,3,127,127,127,0,96,1,125,1,125,96,2,127,125,1,125,96,2,125,127,1,125,2,152,128,128,128,0,1,3,101,
      110,118,15,95,95,108,105,110,101,97,114,95,109,101,109,111,114,121,2,0,1,3,175,128,128,128,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,4,5,7,223,134,128,
      128,0,42,20,95,115,101,110,100,69,118,101,110,116,95,105,110,112,117,116,71,97,105,110,0,0,21,95,115,101,110,100,69,118,101,110,116,95,109,97,107,101,117,112,71,97,105,110,0,1,14,95,115,101,110,100,69,
      118,101,110,116,95,109,105,120,0,2,21,95,115,101,110,100,69,118,101,110,116,95,97,116,116,97,99,107,66,97,115,101,0,3,22,95,115,101,110,100,69,118,101,110,116,95,114,101,108,101,97,115,101,66,97,115,101,
      0,4,22,95,115,101,110,100,69,118,101,110,116,95,97,116,116,97,99,107,68,101,112,116,104,0,5,23,95,115,101,110,100,69,118,101,110,116,95,114,101,108,101,97,115,101,68,101,112,116,104,0,6,17,95,115,101,110,
      100,69,118,101,110,116,95,99,111,109,112,48,120,0,7,17,95,115,101,110,100,69,118,101,110,116,95,99,111,109,112,48,121,0,8,17,95,115,101,110,100,69,118,101,110,116,95,99,111,109,112,49,120,0,9,17,95,115,
      101,110,100,69,118,101,110,116,95,99,111,109,112,49,121,0,10,17,95,115,101,110,100,69,118,101,110,116,95,99,111,109,112,50,120,0,11,17,95,115,101,110,100,69,118,101,110,116,95,99,111,109,112,50,121,0,12,
      17,95,115,101,110,100,69,118,101,110,116,95,99,111,109,112,51,120,0,13,17,95,115,101,110,100,69,118,101,110,116,95,99,111,109,112,51,121,0,14,17,95,115,101,110,100,69,118,101,110,116,95,99,111,109,112,
      52,120,0,15,17,95,115,101,110,100,69,118,101,110,116,95,99,111,109,112,52,121,0,16,17,95,115,101,110,100,69,118,101,110,116,95,99,111,109,112,53,120,0,17,17,95,115,101,110,100,69,118,101,110,116,95,99,
      111,109,112,53,121,0,18,17,95,115,101,110,100,69,118,101,110,116,95,99,111,109,112,54,120,0,19,17,95,115,101,110,100,69,118,101,110,116,95,99,111,109,112,54,121,0,20,17,95,115,101,110,100,69,118,101,110,
      116,95,99,111,109,112,55,120,0,21,17,95,115,101,110,100,69,118,101,110,116,95,99,111,109,112,55,121,0,22,27,95,115,101,110,100,69,118,101,110,116,95,119,97,118,101,115,104,97,112,101,114,65,109,111,117,
      110,116,0,23,17,95,115,101,110,100,69,118,101,110,116,95,119,97,118,101,48,120,0,24,17,95,115,101,110,100,69,118,101,110,116,95,119,97,118,101,48,121,0,25,17,95,115,101,110,100,69,118,101,110,116,95,119,
      97,118,101,49,120,0,26,17,95,115,101,110,100,69,118,101,110,116,95,119,97,118,101,49,121,0,27,17,95,115,101,110,100,69,118,101,110,116,95,119,97,118,101,50,120,0,28,17,95,115,101,110,100,69,118,101,110,
      116,95,119,97,118,101,50,121,0,29,17,95,115,101,110,100,69,118,101,110,116,95,119,97,118,101,51,120,0,30,17,95,115,101,110,100,69,118,101,110,116,95,119,97,118,101,51,121,0,31,17,95,115,101,110,100,69,
      118,101,110,116,95,119,97,118,101,52,120,0,32,17,95,115,101,110,100,69,118,101,110,116,95,119,97,118,101,52,121,0,33,17,95,115,101,110,100,69,118,101,110,116,95,119,97,118,101,53,120,0,34,17,95,115,101,
      110,100,69,118,101,110,116,95,119,97,118,101,53,121,0,35,17,95,115,101,110,100,69,118,101,110,116,95,119,97,118,101,54,120,0,36,17,95,115,101,110,100,69,118,101,110,116,95,119,97,118,101,54,121,0,37,17,
      95,115,101,110,100,69,118,101,110,116,95,119,97,118,101,55,120,0,38,17,95,115,101,110,100,69,118,101,110,116,95,119,97,118,101,55,121,0,39,10,105,110,105,116,105,97,108,105,115,101,0,40,12,97,100,118,97,
      110,99,101,66,108,111,99,107,0,41,12,129,128,128,128,0,1,10,221,208,128,128,0,46,12,0,32,0,65,24,106,32,1,56,2,0,11,12,0,32,0,65,28,106,32,1,56,2,0,11,12,0,32,0,65,32,106,32,1,56,2,0,11,12,0,32,0,65,36,
      106,32,1,56,2,0,11,12,0,32,0,65,40,106,32,1,56,2,0,11,12,0,32,0,65,44,106,32,1,56,2,0,11,12,0,32,0,65,48,106,32,1,56,2,0,11,40,0,32,0,65,52,106,67,0,0,0,0,67,0,0,112,194,32,1,32,1,67,0,0,112,194,93,27,
      32,1,67,0,0,0,0,94,27,56,2,0,11,41,0,32,0,65,212,0,106,67,0,0,0,0,67,0,0,112,194,32,1,32,1,67,0,0,112,194,93,27,32,1,67,0,0,0,0,94,27,56,2,0,11,40,0,32,0,65,56,106,67,0,0,0,0,67,0,0,112,194,32,1,32,1,67,
      0,0,112,194,93,27,32,1,67,0,0,0,0,94,27,56,2,0,11,41,0,32,0,65,216,0,106,67,0,0,0,0,67,0,0,112,194,32,1,32,1,67,0,0,112,194,93,27,32,1,67,0,0,0,0,94,27,56,2,0,11,40,0,32,0,65,60,106,67,0,0,0,0,67,0,0,112,
      194,32,1,32,1,67,0,0,112,194,93,27,32,1,67,0,0,0,0,94,27,56,2,0,11,41,0,32,0,65,220,0,106,67,0,0,0,0,67,0,0,112,194,32,1,32,1,67,0,0,112,194,93,27,32,1,67,0,0,0,0,94,27,56,2,0,11,41,0,32,0,65,192,0,106,
      67,0,0,0,0,67,0,0,112,194,32,1,32,1,67,0,0,112,194,93,27,32,1,67,0,0,0,0,94,27,56,2,0,11,41,0,32,0,65,224,0,106,67,0,0,0,0,67,0,0,112,194,32,1,32,1,67,0,0,112,194,93,27,32,1,67,0,0,0,0,94,27,56,2,0,11,
      41,0,32,0,65,196,0,106,67,0,0,0,0,67,0,0,112,194,32,1,32,1,67,0,0,112,194,93,27,32,1,67,0,0,0,0,94,27,56,2,0,11,41,0,32,0,65,228,0,106,67,0,0,0,0,67,0,0,112,194,32,1,32,1,67,0,0,112,194,93,27,32,1,67,0,
      0,0,0,94,27,56,2,0,11,41,0,32,0,65,200,0,106,67,0,0,0,0,67,0,0,112,194,32,1,32,1,67,0,0,112,194,93,27,32,1,67,0,0,0,0,94,27,56,2,0,11,41,0,32,0,65,232,0,106,67,0,0,0,0,67,0,0,112,194,32,1,32,1,67,0,0,112,
      194,93,27,32,1,67,0,0,0,0,94,27,56,2,0,11,41,0,32,0,65,204,0,106,67,0,0,0,0,67,0,0,112,194,32,1,32,1,67,0,0,112,194,93,27,32,1,67,0,0,0,0,94,27,56,2,0,11,41,0,32,0,65,236,0,106,67,0,0,0,0,67,0,0,112,194,
      32,1,32,1,67,0,0,112,194,93,27,32,1,67,0,0,0,0,94,27,56,2,0,11,41,0,32,0,65,208,0,106,67,0,0,0,0,67,0,0,112,194,32,1,32,1,67,0,0,112,194,93,27,32,1,67,0,0,0,0,94,27,56,2,0,11,41,0,32,0,65,240,0,106,67,
      0,0,0,0,67,0,0,112,194,32,1,32,1,67,0,0,112,194,93,27,32,1,67,0,0,0,0,94,27,56,2,0,11,41,0,32,0,65,180,1,106,67,0,0,128,63,67,0,0,0,0,32,1,32,1,67,0,0,0,0,93,27,32,1,67,0,0,128,63,94,27,56,2,0,11,41,0,
      32,0,65,244,0,106,67,0,0,128,63,67,0,0,128,191,32,1,32,1,67,0,0,128,191,93,27,32,1,67,0,0,128,63,94,27,56,2,0,11,41,0,32,0,65,148,1,106,67,0,0,128,63,67,0,0,128,191,32,1,32,1,67,0,0,128,191,93,27,32,1,
      67,0,0,128,63,94,27,56,2,0,11,41,0,32,0,65,248,0,106,67,0,0,128,63,67,0,0,128,191,32,1,32,1,67,0,0,128,191,93,27,32,1,67,0,0,128,63,94,27,56,2,0,11,41,0,32,0,65,152,1,106,67,0,0,128,63,67,0,0,128,191,32,
      1,32,1,67,0,0,128,191,93,27,32,1,67,0,0,128,63,94,27,56,2,0,11,41,0,32,0,65,252,0,106,67,0,0,128,63,67,0,0,128,191,32,1,32,1,67,0,0,128,191,93,27,32,1,67,0,0,128,63,94,27,56,2,0,11,41,0,32,0,65,156,1,106,
      67,0,0,128,63,67,0,0,128,191,32,1,32,1,67,0,0,128,191,93,27,32,1,67,0,0,128,63,94,27,56,2,0,11,41,0,32,0,65,128,1,106,67,0,0,128,63,67,0,0,128,191,32,1,32,1,67,0,0,128,191,93,27,32,1,67,0,0,128,63,94,27,
      56,2,0,11,41,0,32,0,65,160,1,106,67,0,0,128,63,67,0,0,128,191,32,1,32,1,67,0,0,128,191,93,27,32,1,67,0,0,128,63,94,27,56,2,0,11,41,0,32,0,65,132,1,106,67,0,0,128,63,67,0,0,128,191,32,1,32,1,67,0,0,128,
      191,93,27,32,1,67,0,0,128,63,94,27,56,2,0,11,41,0,32,0,65,164,1,106,67,0,0,128,63,67,0,0,128,191,32,1,32,1,67,0,0,128,191,93,27,32,1,67,0,0,128,63,94,27,56,2,0,11,41,0,32,0,65,136,1,106,67,0,0,128,63,67,
      0,0,128,191,32,1,32,1,67,0,0,128,191,93,27,32,1,67,0,0,128,63,94,27,56,2,0,11,41,0,32,0,65,168,1,106,67,0,0,128,63,67,0,0,128,191,32,1,32,1,67,0,0,128,191,93,27,32,1,67,0,0,128,63,94,27,56,2,0,11,41,0,
      32,0,65,140,1,106,67,0,0,128,63,67,0,0,128,191,32,1,32,1,67,0,0,128,191,93,27,32,1,67,0,0,128,63,94,27,56,2,0,11,41,0,32,0,65,172,1,106,67,0,0,128,63,67,0,0,128,191,32,1,32,1,67,0,0,128,191,93,27,32,1,
      67,0,0,128,63,94,27,56,2,0,11,41,0,32,0,65,144,1,106,67,0,0,128,63,67,0,0,128,191,32,1,32,1,67,0,0,128,191,93,27,32,1,67,0,0,128,63,94,27,56,2,0,11,41,0,32,0,65,176,1,106,67,0,0,128,63,67,0,0,128,191,32,
      1,32,1,67,0,0,128,191,93,27,32,1,67,0,0,128,63,94,27,56,2,0,11,152,4,1,1,123,65,0,32,3,57,3,128,128,128,128,0,32,0,65,240,247,12,106,65,242,242,255,251,3,54,2,0,32,0,65,176,1,106,66,128,128,128,252,3,55,
      2,0,32,0,65,168,1,106,66,128,128,128,248,179,230,204,153,63,55,2,0,32,0,65,160,1,106,66,154,179,230,244,171,179,230,204,62,55,2,0,32,0,65,152,1,106,66,179,230,204,249,139,128,128,128,191,127,55,2,0,32,
      0,65,144,1,106,66,128,128,128,252,131,128,128,192,191,127,55,2,0,32,0,65,136,1,106,66,128,128,128,248,179,230,204,153,63,55,2,0,32,0,65,128,1,106,66,154,179,230,244,171,179,230,204,62,55,2,0,32,0,65,248,
      0,106,66,179,230,204,249,139,128,128,128,191,127,55,2,0,32,0,65,240,0,106,66,128,128,128,137,140,128,128,192,191,127,55,2,0,32,0,65,232,0,106,66,128,128,192,141,140,128,128,184,65,55,2,0,32,0,65,224,0,
      106,66,128,128,208,144,140,128,128,248,65,55,2,0,32,0,65,216,0,106,66,128,128,192,146,140,128,128,154,66,55,2,0,32,0,65,208,0,106,66,128,128,128,128,128,128,128,184,66,55,2,0,32,0,65,200,0,106,66,128,128,
      128,137,140,128,128,208,64,55,2,0,32,0,65,192,0,106,66,128,128,192,143,140,128,128,208,65,55,2,0,32,0,65,56,106,66,128,128,160,146,140,128,128,144,66,55,2,0,32,0,65,48,106,66,128,128,128,252,131,128,128,
      184,66,55,2,0,32,0,65,40,106,66,128,128,160,146,132,128,128,128,63,55,2,0,32,0,65,32,106,66,128,128,128,252,131,128,128,208,192,0,55,2,0,32,0,65,24,106,66,0,55,2,0,32,0,65,224,1,106,65,0,54,2,0,32,0,65,
      212,1,106,65,0,54,2,0,32,0,65,216,1,106,66,174,231,0,55,2,0,32,0,65,184,1,106,66,128,128,192,147,140,128,128,184,66,55,2,0,32,0,65,192,1,106,65,128,128,128,252,3,54,2,0,32,0,65,232,247,12,106,66,0,55,2,
      0,32,0,65,196,1,106,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,4,253,11,2,0,32,0,65,200,247,12,106,32,4,253,11,2,0,32,0,65,216,247,12,106,32,4,253,11,2,0,11,203,50,21,1,127,2,125,1,127,1,124,1,127,1,124,
      1,126,1,127,1,124,6,127,2,125,2,127,1,124,1,127,2,125,1,124,2,127,1,123,2,124,1,123,17,125,2,64,32,0,40,2,0,34,3,32,2,70,13,0,2,64,2,64,65,0,43,3,128,128,128,128,0,182,34,4,67,154,153,153,62,148,34,5,139,
      67,0,0,0,79,93,69,13,0,32,5,168,33,6,12,1,11,65,128,128,128,128,120,33,6,11,68,0,0,0,0,0,0,240,191,32,4,187,68,45,67,28,235,226,54,26,63,162,163,34,7,68,239,57,250,254,66,46,134,64,100,33,8,32,7,68,0,0,
      0,0,0,0,224,127,162,33,9,2,64,2,64,32,7,68,254,130,43,101,71,21,247,63,162,68,0,0,0,0,0,0,224,63,68,0,0,0,0,0,0,224,191,32,7,189,34,10,66,127,85,34,11,27,160,34,12,153,68,0,0,0,0,0,0,224,65,99,69,13,0,
      32,12,170,33,13,12,1,11,65,128,128,128,128,120,33,13,11,32,6,65,174,231,0,72,33,14,32,9,68,0,0,0,0,0,0,0,0,32,8,27,33,9,32,7,32,7,98,33,15,65,1,65,127,32,11,27,33,16,32,10,66,32,136,167,65,255,255,255,
      255,7,113,34,11,65,177,197,194,255,3,75,33,17,32,8,32,7,68,81,48,45,213,16,73,135,192,99,114,33,18,67,210,83,251,193,32,4,149,33,19,2,64,2,64,32,4,67,0,0,240,65,149,34,20,139,67,0,0,0,79,93,69,13,0,32,
      20,168,33,21,12,1,11,65,128,128,128,128,120,33,21,11,32,0,65,4,106,33,8,32,6,65,174,231,0,32,14,27,33,22,32,7,32,9,32,15,27,33,23,32,13,32,16,32,17,27,33,24,32,15,32,18,114,33,18,32,0,65,196,1,106,33,16,
      32,0,65,212,0,106,33,14,32,0,65,24,106,33,6,67,0,0,128,191,32,5,149,33,25,32,19,67,0,0,128,63,146,33,26,32,7,68,0,0,0,0,0,0,240,63,160,33,27,32,11,65,171,198,152,132,4,73,33,17,32,11,65,194,220,216,254,
      3,75,33,28,32,11,65,128,128,192,241,3,75,33,29,3,64,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,30,2,64,32,0,40,2,132,248,12,34,11,65,127,70,13,0,32,1,32,3,65,3,116,106,253,93,3,0,32,30,253,228,1,33,30,2,
      64,32,11,65,0,74,13,0,32,0,32,4,56,2,244,247,12,2,64,2,64,2,64,2,64,2,64,32,17,13,0,32,13,33,3,32,23,33,9,32,18,69,13,1,12,4,11,32,24,33,3,32,28,69,13,1,11,32,7,32,3,183,34,9,68,0,0,224,254,66,46,230,191,
      162,160,34,31,32,9,68,118,60,121,53,239,57,234,61,162,34,32,161,33,9,12,1,11,32,27,33,9,32,29,69,13,1,65,0,33,3,68,0,0,0,0,0,0,0,0,33,32,32,7,33,31,32,7,33,9,11,32,31,32,9,32,9,32,9,32,9,162,34,12,32,12,
      32,12,32,12,32,12,68,208,164,190,114,105,55,102,62,162,68,241,107,210,197,65,189,187,190,160,162,68,44,222,37,175,106,86,17,63,160,162,68,147,189,190,22,108,193,102,191,160,162,68,62,85,85,85,85,85,197,
      63,160,162,161,34,12,162,68,0,0,0,0,0,0,0,64,32,12,161,163,32,32,161,160,68,0,0,0,0,0,0,240,63,160,33,9,2,64,2,64,32,3,65,128,8,72,13,0,32,9,68,0,0,0,0,0,0,224,127,162,33,12,2,64,32,3,65,254,15,75,13,0,
      32,3,65,129,120,106,33,11,12,2,11,32,12,68,0,0,0,0,0,0,224,127,162,33,12,32,3,65,253,23,32,3,65,253,23,72,27,65,130,112,106,33,11,12,1,11,32,9,33,12,32,3,33,11,32,3,65,130,120,78,13,0,32,9,68,0,0,0,0,0,
      0,96,3,162,33,12,2,64,32,3,65,184,112,77,13,0,32,3,65,201,7,106,33,11,12,1,11,32,12,68,0,0,0,0,0,0,96,3,162,33,12,32,3,65,240,104,32,3,65,240,104,74,27,65,146,15,106,33,11,11,32,12,32,11,65,255,7,106,173,
      66,52,134,191,162,32,9,32,3,27,33,9,11,32,0,32,21,54,2,252,247,12,32,0,32,26,56,2,240,247,12,32,0,32,22,54,2,216,1,32,0,32,9,182,56,2,248,247,12,32,0,67,0,0,128,63,32,25,16,170,128,128,128,0,147,34,5,56,
      2,128,248,12,32,0,32,5,56,2,212,1,11,32,30,32,6,42,2,0,67,0,0,160,65,149,16,171,128,128,128,0,253,19,253,230,1,34,33,253,31,1,34,34,139,33,19,2,64,2,64,2,64,32,33,253,31,0,139,34,5,188,34,3,65,255,255,
      255,3,74,13,0,2,64,32,3,13,0,67,0,0,128,191,32,33,32,33,253,230,1,253,31,0,149,33,20,12,3,11,2,64,32,3,65,0,78,13,0,67,0,0,192,127,33,20,12,3,11,32,5,67,0,0,0,76,148,188,33,3,65,232,126,33,11,12,1,11,32,
      5,33,20,32,3,65,255,255,255,251,7,75,13,1,65,129,127,33,11,67,0,0,0,0,33,20,32,3,65,128,128,128,252,3,70,13,1,11,32,3,65,141,246,171,2,106,34,3,65,23,117,32,11,106,178,34,35,67,128,32,154,62,148,32,3,65,
      255,255,255,3,113,65,243,137,212,249,3,106,190,67,0,0,128,191,146,34,20,32,20,32,20,67,0,0,0,63,148,148,34,36,147,188,65,128,96,113,190,34,37,67,0,96,222,62,148,32,20,32,37,147,32,36,147,32,20,32,20,67,
      0,0,0,64,146,149,34,20,32,36,32,20,32,20,148,34,20,32,20,32,20,148,34,20,67,238,233,145,62,148,67,170,170,42,63,146,148,32,20,32,20,67,38,158,120,62,148,67,19,206,204,62,146,148,146,146,148,146,34,20,67,
      0,96,222,62,148,32,35,67,219,39,84,53,148,32,20,32,37,146,67,217,234,4,184,148,146,146,146,146,33,20,11,67,0,0,112,194,32,20,67,0,0,160,65,148,34,20,67,0,0,112,194,32,20,67,0,0,112,194,94,27,32,5,67,172,
      197,39,55,93,27,33,20,2,64,2,64,2,64,32,19,188,34,3,65,255,255,255,3,74,13,0,2,64,32,3,13,0,67,0,0,128,191,32,34,32,34,148,149,33,34,12,3,11,2,64,32,3,65,0,78,13,0,67,0,0,192,127,33,34,12,3,11,32,19,67,
      0,0,0,76,148,188,33,3,65,232,126,33,11,12,1,11,32,19,33,34,32,3,65,255,255,255,251,7,75,13,1,65,129,127,33,11,67,0,0,0,0,33,34,32,3,65,128,128,128,252,3,70,13,1,11,32,3,65,141,246,171,2,106,34,3,65,23,
      117,32,11,106,178,34,37,67,128,32,154,62,148,32,3,65,255,255,255,3,113,65,243,137,212,249,3,106,190,67,0,0,128,191,146,34,5,32,5,32,5,67,0,0,0,63,148,148,34,34,147,188,65,128,96,113,190,34,36,67,0,96,222,
      62,148,32,5,32,36,147,32,34,147,32,5,32,5,67,0,0,0,64,146,149,34,5,32,34,32,5,32,5,148,34,5,32,5,32,5,148,34,5,67,238,233,145,62,148,67,170,170,42,63,146,148,32,5,32,5,67,38,158,120,62,148,67,19,206,204,
      62,146,148,146,146,148,146,34,5,67,0,96,222,62,148,32,37,67,219,39,84,53,148,32,5,32,36,146,67,217,234,4,184,148,146,146,146,146,33,34,11,32,0,42,2,184,1,33,5,32,0,32,5,32,20,32,5,147,67,0,0,128,63,67,
      0,0,128,191,32,0,42,2,244,247,12,34,36,32,0,65,36,65,40,32,20,32,5,94,27,106,42,2,0,67,111,18,131,58,148,148,149,16,170,128,128,128,0,147,148,146,34,20,56,2,184,1,32,0,42,2,188,1,33,5,32,0,32,5,67,0,0,
      112,194,32,34,67,0,0,160,65,148,34,34,67,0,0,112,194,32,34,67,0,0,112,194,94,27,32,19,67,172,197,39,55,93,27,34,19,32,5,147,67,0,0,128,63,67,0,0,128,191,32,36,32,0,65,36,65,40,32,19,32,5,94,27,106,42,2,
      0,67,111,18,131,58,148,148,149,16,170,128,128,128,0,147,148,146,34,5,56,2,188,1,2,64,2,64,67,0,0,0,0,67,0,0,112,194,32,20,32,5,32,20,32,5,94,27,34,5,32,5,67,0,0,112,194,93,27,32,5,67,0,0,0,0,94,27,34,19,
      32,0,42,2,52,34,20,95,69,13,0,32,14,42,2,0,33,19,12,1,11,2,64,32,19,32,0,42,2,80,34,34,96,13,0,32,0,42,2,56,33,36,2,64,2,64,32,19,32,20,96,69,13,0,32,19,32,36,95,69,13,0,65,0,33,3,65,1,33,11,32,36,33,34,
      12,1,11,32,0,42,2,60,33,20,2,64,32,19,32,36,96,69,13,0,32,19,32,20,95,69,13,0,65,1,33,3,65,2,33,11,32,20,33,34,32,36,33,20,12,1,11,32,0,42,2,64,33,36,2,64,32,19,32,20,96,69,13,0,32,19,32,36,95,69,13,0,
      65,2,33,3,65,3,33,11,32,36,33,34,12,1,11,32,0,42,2,68,33,20,2,64,32,19,32,36,96,69,13,0,32,19,32,20,95,69,13,0,65,3,33,3,65,4,33,11,32,20,33,34,32,36,33,20,12,1,11,32,0,42,2,72,33,36,2,64,32,19,32,20,96,
      69,13,0,32,19,32,36,95,69,13,0,65,4,33,3,65,5,33,11,32,36,33,34,12,1,11,32,0,42,2,76,33,20,2,64,32,19,32,36,96,69,13,0,32,19,32,20,95,69,13,0,65,5,33,3,65,6,33,11,32,20,33,34,32,36,33,20,12,1,11,32,19,
      32,34,95,69,13,1,32,19,32,20,96,69,13,1,65,6,33,3,65,7,33,11,11,2,64,32,34,32,20,147,34,34,139,67,111,18,131,58,93,69,13,0,32,14,32,3,65,2,116,106,42,2,0,33,19,12,2,11,32,14,32,3,65,2,116,106,42,2,0,34,
      36,67,0,0,128,63,67,0,0,0,0,32,19,32,20,147,32,34,149,34,19,32,19,67,0,0,0,0,93,27,32,19,67,0,0,128,63,94,27,32,14,32,11,65,2,116,106,42,2,0,32,36,147,148,146,33,19,12,1,11,32,0,42,2,112,33,19,11,32,0,
      32,19,32,5,147,32,0,42,2,28,146,34,5,67,0,0,32,194,32,5,67,0,0,32,194,94,27,34,34,67,0,0,160,65,149,16,171,128,128,128,0,34,5,32,0,42,2,192,1,32,5,147,32,0,42,2,248,247,12,148,146,34,5,56,2,192,1,32,0,
      42,2,32,34,19,253,19,32,33,32,5,253,19,253,230,1,253,230,1,32,33,67,0,0,128,63,32,19,147,253,19,253,230,1,253,228,1,33,33,2,64,32,0,42,2,180,1,34,5,67,0,0,0,0,94,69,13,0,67,0,0,128,63,32,5,147,253,19,32,
      33,253,230,1,32,5,253,19,32,6,32,33,253,31,0,16,172,128,128,128,0,253,19,32,6,32,33,253,31,1,16,172,128,128,128,0,253,32,1,253,230,1,253,228,1,33,33,11,32,0,42,2,228,247,12,33,5,32,0,32,33,253,31,1,34,
      19,56,2,228,247,12,32,0,42,2,224,247,12,33,20,32,0,32,33,253,31,0,34,36,56,2,224,247,12,32,0,32,19,32,5,147,32,0,42,2,240,247,12,34,19,32,0,42,2,236,247,12,148,146,34,5,56,2,236,247,12,32,0,32,36,32,20,
      147,32,19,32,0,42,2,232,247,12,148,146,34,19,56,2,232,247,12,32,0,32,0,42,2,196,1,34,20,32,30,253,31,0,139,34,36,32,20,32,36,94,27,56,2,196,1,32,0,32,0,42,2,200,1,34,36,32,30,253,31,1,34,20,139,34,37,32,
      36,32,37,94,27,56,2,200,1,32,0,32,0,42,2,204,1,34,36,32,19,139,34,37,32,36,32,37,94,27,56,2,204,1,32,0,32,0,42,2,208,1,34,36,32,5,139,34,37,32,36,32,37,94,27,56,2,208,1,32,0,40,2,220,1,65,174,231,0,111,
      33,3,2,64,2,64,32,0,40,2,224,1,32,0,40,2,216,1,78,13,0,32,3,65,174,231,0,106,33,11,12,1,11,32,0,32,0,42,2,200,247,12,32,0,32,3,65,174,231,0,106,34,11,32,3,32,3,65,0,72,27,65,3,116,106,34,15,65,232,1,106,
      253,93,3,0,34,33,253,31,0,147,56,2,200,247,12,32,0,32,0,42,2,204,247,12,32,33,253,31,1,147,56,2,204,247,12,32,0,32,0,42,2,208,247,12,32,15,65,216,188,6,106,253,93,3,0,34,33,253,31,0,147,56,2,208,247,12,
      32,0,32,0,42,2,212,247,12,32,33,253,31,1,147,56,2,212,247,12,11,32,19,253,19,33,33,32,0,32,11,32,3,32,3,65,0,72,27,65,3,116,106,34,3,65,236,1,106,32,20,32,20,148,34,20,56,2,0,32,3,65,232,1,106,32,30,32,
      30,253,230,1,253,31,0,34,36,56,2,0,32,3,65,216,188,6,106,32,19,32,19,148,34,19,56,2,0,32,8,32,0,40,2,220,1,65,174,231,0,111,34,3,65,174,231,0,106,32,3,32,3,65,0,72,27,65,3,116,106,65,216,188,6,106,32,5,
      32,5,148,34,37,56,2,0,32,0,32,36,32,0,42,2,200,247,12,146,34,35,56,2,200,247,12,32,0,32,19,32,0,42,2,208,247,12,146,34,38,56,2,208,247,12,32,0,32,20,32,0,42,2,204,247,12,146,34,19,56,2,204,247,12,32,0,
      32,37,32,0,42,2,212,247,12,146,34,39,56,2,212,247,12,32,0,32,0,40,2,220,1,65,1,106,34,3,65,0,32,3,32,0,40,2,216,1,34,11,72,27,54,2,220,1,2,64,32,0,40,2,224,1,34,3,32,11,78,13,0,32,0,32,3,65,1,106,34,3,
      54,2,224,1,11,32,33,32,5,253,32,1,33,30,32,0,32,0,40,2,220,247,12,65,1,106,34,11,54,2,220,247,12,32,0,32,0,42,2,216,247,12,34,5,32,34,32,0,42,2,28,147,32,5,147,32,0,42,2,128,248,12,148,146,34,40,56,2,216,
      247,12,2,64,32,11,32,0,40,2,252,247,12,72,13,0,32,3,65,1,32,3,65,1,74,27,33,11,32,0,65,0,54,2,220,247,12,2,64,2,64,2,64,32,0,42,2,196,1,34,36,188,34,3,65,255,255,255,3,74,13,0,2,64,32,36,188,65,255,255,
      255,255,7,113,13,0,67,0,0,128,191,32,36,32,36,148,149,33,41,12,3,11,2,64,32,3,65,0,78,13,0,67,0,0,192,127,33,41,12,3,11,32,36,67,0,0,0,76,148,188,33,3,65,232,126,33,15,12,1,11,32,36,33,41,32,3,65,255,255,
      255,251,7,75,13,1,65,129,127,33,15,67,0,0,0,0,33,41,32,3,65,128,128,128,252,3,70,13,1,11,32,3,65,141,246,171,2,106,34,3,65,23,117,32,15,106,178,34,37,67,128,32,154,62,148,32,3,65,255,255,255,3,113,65,243,
      137,212,249,3,106,190,67,0,0,128,191,146,34,5,32,5,32,5,67,0,0,0,63,148,148,34,20,147,188,65,128,96,113,190,34,34,67,0,96,222,62,148,32,5,32,34,147,32,20,147,32,5,32,5,67,0,0,0,64,146,149,34,5,32,20,32,
      5,32,5,148,34,5,32,5,32,5,148,34,5,67,238,233,145,62,148,67,170,170,42,63,146,148,32,5,32,5,67,38,158,120,62,148,67,19,206,204,62,146,148,146,146,148,146,34,5,67,0,96,222,62,148,32,37,67,219,39,84,53,148,
      32,5,32,34,146,67,217,234,4,184,148,146,146,146,146,33,41,11,32,11,178,33,5,2,64,2,64,2,64,32,0,42,2,200,1,34,37,188,34,3,65,255,255,255,3,74,13,0,2,64,32,37,188,65,255,255,255,255,7,113,13,0,67,0,0,128,
      191,32,37,32,37,148,149,33,42,12,3,11,2,64,32,3,65,0,78,13,0,67,0,0,192,127,33,42,12,3,11,32,37,67,0,0,0,76,148,188,33,3,65,232,126,33,11,12,1,11,32,37,33,42,32,3,65,255,255,255,251,7,75,13,1,65,129,127,
      33,11,67,0,0,0,0,33,42,32,3,65,128,128,128,252,3,70,13,1,11,32,3,65,141,246,171,2,106,34,3,65,23,117,32,11,106,178,34,42,67,128,32,154,62,148,32,3,65,255,255,255,3,113,65,243,137,212,249,3,106,190,67,0,
      0,128,191,146,34,20,32,20,32,20,67,0,0,0,63,148,148,34,34,147,188,65,128,96,113,190,34,43,67,0,96,222,62,148,32,20,32,43,147,32,34,147,32,20,32,20,67,0,0,0,64,146,149,34,20,32,34,32,20,32,20,148,34,20,
      32,20,32,20,148,34,20,67,238,233,145,62,148,67,170,170,42,63,146,148,32,20,32,20,67,38,158,120,62,148,67,19,206,204,62,146,148,146,146,148,146,34,20,67,0,96,222,62,148,32,42,67,219,39,84,53,148,32,20,32,
      43,146,67,217,234,4,184,148,146,146,146,146,33,42,11,32,35,32,5,149,33,20,2,64,2,64,2,64,32,0,42,2,204,1,34,35,188,34,3,65,255,255,255,3,74,13,0,2,64,32,35,188,65,255,255,255,255,7,113,13,0,67,0,0,128,
      191,32,35,32,35,148,149,33,44,12,3,11,2,64,32,3,65,0,78,13,0,67,0,0,192,127,33,44,12,3,11,32,35,67,0,0,0,76,148,188,33,3,65,232,126,33,11,12,1,11,32,35,33,44,32,3,65,255,255,255,251,7,75,13,1,65,129,127,
      33,11,67,0,0,0,0,33,44,32,3,65,128,128,128,252,3,70,13,1,11,32,3,65,141,246,171,2,106,34,3,65,23,117,32,11,106,178,34,45,67,128,32,154,62,148,32,3,65,255,255,255,3,113,65,243,137,212,249,3,106,190,67,0,
      0,128,191,146,34,34,32,34,32,34,67,0,0,0,63,148,148,34,43,147,188,65,128,96,113,190,34,44,67,0,96,222,62,148,32,34,32,44,147,32,43,147,32,34,32,34,67,0,0,0,64,146,149,34,34,32,43,32,34,32,34,148,34,34,
      32,34,32,34,148,34,34,67,238,233,145,62,148,67,170,170,42,63,146,148,32,34,32,34,67,38,158,120,62,148,67,19,206,204,62,146,148,146,146,148,146,34,34,67,0,96,222,62,148,32,45,67,219,39,84,53,148,32,34,32,
      44,146,67,217,234,4,184,148,146,146,146,146,33,44,11,32,19,32,5,149,33,34,32,20,145,33,19,2,64,2,64,2,64,32,0,42,2,208,1,34,43,188,34,3,65,255,255,255,3,74,13,0,2,64,32,43,188,65,255,255,255,255,7,113,
      13,0,67,0,0,128,191,32,43,32,43,148,149,33,45,12,3,11,2,64,32,3,65,0,78,13,0,67,0,0,192,127,33,45,12,3,11,32,43,67,0,0,0,76,148,188,33,3,65,232,126,33,11,12,1,11,32,43,33,45,32,3,65,255,255,255,251,7,75,
      13,1,65,129,127,33,11,67,0,0,0,0,33,45,32,3,65,128,128,128,252,3,70,13,1,11,32,3,65,141,246,171,2,106,34,3,65,23,117,32,11,106,178,34,46,67,128,32,154,62,148,32,3,65,255,255,255,3,113,65,243,137,212,249,
      3,106,190,67,0,0,128,191,146,34,20,32,20,32,20,67,0,0,0,63,148,148,34,45,147,188,65,128,96,113,190,34,47,67,0,96,222,62,148,32,20,32,47,147,32,45,147,32,20,32,20,67,0,0,0,64,146,149,34,20,32,45,32,20,32,
      20,148,34,20,32,20,32,20,148,34,20,67,238,233,145,62,148,67,170,170,42,63,146,148,32,20,32,20,67,38,158,120,62,148,67,19,206,204,62,146,148,146,146,148,146,34,20,67,0,96,222,62,148,32,46,67,219,39,84,53,
      148,32,20,32,47,146,67,217,234,4,184,148,146,146,146,146,33,45,11,32,38,32,5,149,33,38,32,34,145,33,20,2,64,2,64,2,64,32,19,188,34,3,65,255,255,255,3,74,13,0,2,64,32,19,188,65,255,255,255,255,7,113,13,
      0,67,0,0,128,191,32,19,32,19,148,149,33,47,12,3,11,2,64,32,3,65,0,78,13,0,67,0,0,192,127,33,47,12,3,11,32,19,67,0,0,0,76,148,188,33,3,65,232,126,33,11,12,1,11,32,19,33,47,32,3,65,255,255,255,251,7,75,13,
      1,65,129,127,33,11,67,0,0,0,0,33,47,32,3,65,128,128,128,252,3,70,13,1,11,32,3,65,141,246,171,2,106,34,3,65,23,117,32,11,106,178,34,48,67,128,32,154,62,148,32,3,65,255,255,255,3,113,65,243,137,212,249,3,
      106,190,67,0,0,128,191,146,34,34,32,34,32,34,67,0,0,0,63,148,148,34,47,147,188,65,128,96,113,190,34,46,67,0,96,222,62,148,32,34,32,46,147,32,47,147,32,34,32,34,67,0,0,0,64,146,149,34,34,32,47,32,34,32,
      34,148,34,34,32,34,32,34,148,34,34,67,238,233,145,62,148,67,170,170,42,63,146,148,32,34,32,34,67,38,158,120,62,148,67,19,206,204,62,146,148,146,146,148,146,34,34,67,0,96,222,62,148,32,48,67,219,39,84,53,
      148,32,34,32,46,146,67,217,234,4,184,148,146,146,146,146,33,47,11,32,39,32,5,149,33,34,32,38,145,33,5,2,64,2,64,2,64,32,20,188,34,3,65,255,255,255,3,74,13,0,2,64,32,20,188,65,255,255,255,255,7,113,13,0,
      67,0,0,128,191,32,20,32,20,148,149,33,39,12,3,11,2,64,32,3,65,0,78,13,0,67,0,0,192,127,33,39,12,3,11,32,20,67,0,0,0,76,148,188,33,3,65,232,126,33,11,12,1,11,32,20,33,39,32,3,65,255,255,255,251,7,75,13,
      1,65,129,127,33,11,67,0,0,0,0,33,39,32,3,65,128,128,128,252,3,70,13,1,11,32,3,65,141,246,171,2,106,34,3,65,23,117,32,11,106,178,34,48,67,128,32,154,62,148,32,3,65,255,255,255,3,113,65,243,137,212,249,3,
      106,190,67,0,0,128,191,146,34,38,32,38,32,38,67,0,0,0,63,148,148,34,39,147,188,65,128,96,113,190,34,46,67,0,96,222,62,148,32,38,32,46,147,32,39,147,32,38,32,38,67,0,0,0,64,146,149,34,38,32,39,32,38,32,
      38,148,34,38,32,38,32,38,148,34,38,67,238,233,145,62,148,67,170,170,42,63,146,148,32,38,32,38,67,38,158,120,62,148,67,19,206,204,62,146,148,146,146,148,146,34,38,67,0,96,222,62,148,32,48,67,219,39,84,53,
      148,32,38,32,46,146,67,217,234,4,184,148,146,146,146,146,33,39,11,32,34,145,33,34,2,64,2,64,2,64,32,5,188,34,3,65,255,255,255,3,74,13,0,2,64,32,5,188,65,255,255,255,255,7,113,13,0,67,0,0,128,191,32,5,32,
      5,148,149,33,46,12,3,11,2,64,32,3,65,0,78,13,0,67,0,0,192,127,33,46,12,3,11,32,5,67,0,0,0,76,148,188,33,3,65,232,126,33,11,12,1,11,32,5,33,46,32,3,65,255,255,255,251,7,75,13,1,65,129,127,33,11,67,0,0,0,
      0,33,46,32,3,65,128,128,128,252,3,70,13,1,11,32,3,65,141,246,171,2,106,34,3,65,23,117,32,11,106,178,34,49,67,128,32,154,62,148,32,3,65,255,255,255,3,113,65,243,137,212,249,3,106,190,67,0,0,128,191,146,
      34,38,32,38,32,38,67,0,0,0,63,148,148,34,46,147,188,65,128,96,113,190,34,48,67,0,96,222,62,148,32,38,32,48,147,32,46,147,32,38,32,38,67,0,0,0,64,146,149,34,38,32,46,32,38,32,38,148,34,38,32,38,32,38,148,
      34,38,67,238,233,145,62,148,67,170,170,42,63,146,148,32,38,32,38,67,38,158,120,62,148,67,19,206,204,62,146,148,146,146,148,146,34,38,67,0,96,222,62,148,32,49,67,219,39,84,53,148,32,38,32,48,146,67,217,
      234,4,184,148,146,146,146,146,33,46,11,2,64,2,64,2,64,32,34,188,34,3,65,255,255,255,3,74,13,0,2,64,32,34,188,65,255,255,255,255,7,113,13,0,67,0,0,128,191,32,34,32,34,148,149,33,38,12,3,11,2,64,32,3,65,
      0,78,13,0,67,0,0,192,127,33,38,12,3,11,32,34,67,0,0,0,76,148,188,33,3,65,232,126,33,11,12,1,11,32,34,33,38,32,3,65,255,255,255,251,7,75,13,1,65,129,127,33,11,67,0,0,0,0,33,38,32,3,65,128,128,128,252,3,
      70,13,1,11,32,3,65,141,246,171,2,106,34,3,65,23,117,32,11,106,178,34,50,67,128,32,154,62,148,32,3,65,255,255,255,3,113,65,243,137,212,249,3,106,190,67,0,0,128,191,146,34,38,32,38,32,38,67,0,0,0,63,148,
      148,34,48,147,188,65,128,96,113,190,34,49,67,0,96,222,62,148,32,38,32,49,147,32,48,147,32,38,32,38,67,0,0,0,64,146,149,34,38,32,48,32,38,32,38,148,34,38,32,38,32,38,148,34,38,67,238,233,145,62,148,67,170,
      170,42,63,146,148,32,38,32,38,67,38,158,120,62,148,67,19,206,204,62,146,148,146,146,148,146,34,38,67,0,96,222,62,148,32,50,67,219,39,84,53,148,32,38,32,49,146,67,217,234,4,184,148,146,146,146,146,33,38,
      11,2,64,32,0,40,2,136,248,12,34,3,65,31,74,13,0,32,0,40,2,0,33,11,32,0,32,3,65,6,116,106,34,3,65,208,248,12,106,67,0,0,240,194,32,47,67,0,0,160,65,148,32,19,67,189,55,134,53,93,27,253,19,67,0,0,240,194,
      32,39,67,0,0,160,65,148,32,20,67,189,55,134,53,93,27,253,32,1,253,91,3,0,0,32,3,65,192,248,12,106,67,0,0,240,194,32,41,67,0,0,160,65,148,32,36,67,189,55,134,53,93,27,253,19,67,0,0,240,194,32,42,67,0,0,
      160,65,148,32,37,67,189,55,134,53,93,27,34,19,253,32,1,32,19,253,32,3,253,11,4,0,32,3,65,164,248,12,106,65,0,54,2,0,32,3,65,160,248,12,106,32,11,54,2,0,32,0,40,2,136,248,12,33,3,11,32,0,32,3,65,1,106,54,
      2,136,248,12,2,64,32,0,40,2,160,136,13,34,3,65,31,74,13,0,32,0,32,3,65,6,116,106,34,3,65,240,136,13,106,67,0,0,240,194,32,46,67,0,0,160,65,148,32,5,67,189,55,134,53,93,27,253,19,67,0,0,240,194,32,38,67,
      0,0,160,65,148,32,34,67,189,55,134,53,93,27,253,32,1,253,91,3,0,0,32,3,65,224,136,13,106,67,0,0,240,194,32,44,67,0,0,160,65,148,32,35,67,189,55,134,53,93,27,253,19,67,0,0,240,194,32,45,67,0,0,160,65,148,
      32,43,67,189,55,134,53,93,27,34,5,253,32,1,32,5,253,32,3,253,11,4,0,32,3,65,196,136,13,106,65,0,54,2,0,32,3,65,192,136,13,106,32,0,40,2,0,54,2,0,32,0,40,2,160,136,13,33,3,11,32,0,32,3,65,1,106,54,2,160,
      136,13,2,64,32,0,40,2,192,152,13,34,3,65,31,74,13,0,32,0,32,3,65,12,108,106,34,3,65,204,152,13,106,32,40,56,2,0,32,3,65,200,152,13,106,65,0,54,2,0,32,3,65,196,152,13,106,32,0,40,2,0,54,2,0,32,0,40,2,192,
      152,13,33,3,11,32,16,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,11,2,0,32,0,32,3,65,1,106,54,2,192,152,13,11,32,0,65,1,54,2,132,248,12,32,30,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,228,1,33,30,32,0,
      40,2,0,33,3,11,32,1,32,3,65,3,116,106,65,128,32,106,32,30,253,91,3,0,0,32,0,32,0,40,2,0,65,1,106,34,3,54,2,0,32,3,32,2,71,13,0,11,11,32,0,65,0,54,2,0,11,149,4,4,2,127,2,125,1,124,1,125,2,64,2,64,2,64,2,
      64,2,64,2,64,2,64,32,0,188,34,1,65,255,255,255,255,7,113,34,2,65,208,216,186,149,4,72,13,0,2,64,32,2,65,128,128,128,252,7,77,13,0,32,0,33,3,12,7,11,2,64,32,2,65,152,228,197,149,4,73,13,0,32,1,65,0,72,13,
      0,32,0,67,0,0,0,127,148,15,11,32,1,65,127,74,13,1,67,0,0,0,0,33,3,32,2,65,181,227,191,150,4,79,13,6,12,1,11,2,64,32,2,65,152,228,197,245,3,74,13,0,32,2,65,128,128,128,200,3,76,13,3,65,0,33,2,67,0,0,0,0,
      33,4,32,0,33,3,12,5,11,32,2,65,146,171,148,252,3,77,13,1,11,2,64,68,0,0,0,0,0,0,224,63,68,0,0,0,0,0,0,224,191,32,1,65,127,74,27,32,0,67,59,170,184,63,148,187,160,34,5,153,68,0,0,0,0,0,0,224,65,99,69,13,
      0,32,5,170,33,2,12,3,11,65,128,128,128,128,120,33,2,12,2,11,65,1,65,127,32,1,65,127,74,27,33,2,12,1,11,32,0,67,0,0,128,63,146,15,11,32,0,32,2,178,34,3,67,0,114,49,191,148,146,34,0,32,3,67,142,190,191,53,
      148,34,4,147,33,3,11,32,0,32,3,32,3,32,3,32,3,148,34,6,32,6,67,21,82,53,187,148,67,143,170,42,62,146,148,147,34,6,148,67,0,0,0,64,32,6,147,149,32,4,147,146,67,0,0,128,63,146,33,0,2,64,2,64,32,2,65,128,
      1,72,13,0,32,0,67,0,0,0,127,148,33,3,2,64,32,2,65,254,1,75,13,0,32,2,65,129,127,106,33,1,12,2,11,32,3,67,0,0,0,127,148,33,3,32,2,65,253,2,32,2,65,253,2,72,27,65,130,126,106,33,1,12,1,11,32,0,33,3,32,2,
      33,1,32,2,65,130,127,78,13,0,32,0,67,0,0,128,12,148,33,3,2,64,32,2,65,155,126,77,13,0,32,2,65,230,0,106,33,1,12,1,11,32,3,67,0,0,128,12,148,33,3,32,2,65,182,125,32,2,65,182,125,74,27,65,204,1,106,33,1,
      11,32,3,32,1,65,23,116,65,128,128,128,252,3,106,190,148,32,0,32,2,27,15,11,32,3,11,246,4,4,2,127,3,125,2,127,1,125,2,64,32,0,188,34,1,65,255,255,255,255,7,113,34,2,13,0,67,0,0,128,63,15,11,2,64,32,2,65,
      129,128,128,252,7,72,13,0,32,0,67,0,0,32,65,146,15,11,2,64,2,64,32,2,65,128,128,128,252,3,70,13,0,32,2,65,128,128,128,252,7,71,13,1,32,0,67,0,0,0,0,32,1,65,127,74,27,15,11,67,0,0,32,65,67,205,204,204,61,
      32,1,65,127,74,27,15,11,2,64,2,64,32,1,65,128,128,128,248,3,70,13,0,67,0,0,200,66,33,3,32,1,65,128,128,128,128,4,70,13,1,2,64,32,2,65,129,128,128,232,4,72,13,0,67,0,0,128,127,67,0,0,0,0,32,1,65,0,74,27,
      15,11,67,0,0,128,127,33,3,32,1,65,128,96,113,190,34,4,67,0,144,84,64,148,34,5,32,0,67,189,132,39,58,148,32,0,32,4,147,67,0,144,84,64,148,146,34,4,146,34,0,188,34,2,65,128,128,128,152,4,74,13,1,2,64,2,64,
      32,2,65,128,128,128,152,4,71,13,0,32,4,67,60,170,56,51,146,32,0,32,5,147,94,13,3,32,0,188,65,255,255,255,255,7,113,33,1,12,1,11,67,0,0,0,0,33,3,32,0,188,65,255,255,255,255,7,113,34,1,65,128,128,216,152,
      4,74,13,2,32,2,65,128,128,216,152,124,71,13,0,32,4,32,0,32,5,147,95,13,2,11,65,0,33,6,2,64,32,1,65,128,128,128,248,3,76,13,0,65,0,65,128,128,128,4,32,1,65,23,118,65,130,127,106,118,32,2,106,34,1,65,255,
      255,255,3,113,65,128,128,128,4,114,65,150,1,32,1,65,23,118,65,255,1,113,34,7,107,118,34,6,107,32,6,32,2,65,0,72,27,33,6,32,4,32,5,65,128,128,128,124,32,7,65,129,127,106,117,32,1,113,190,147,34,5,146,188,
      33,2,11,2,64,32,6,65,23,116,32,2,65,128,128,126,113,190,34,0,67,0,114,49,63,148,34,8,32,0,67,140,190,191,53,148,32,4,32,0,32,5,147,147,67,24,114,49,63,148,146,34,4,146,34,0,32,0,32,0,32,0,32,0,148,34,3,
      32,3,32,3,32,3,32,3,67,76,187,49,51,148,67,14,234,221,181,146,148,67,85,179,138,56,146,148,67,97,11,54,187,146,148,67,171,170,42,62,146,148,147,34,3,148,32,3,67,0,0,0,192,146,149,32,4,32,0,32,8,147,147,
      34,3,32,0,32,3,148,146,147,147,67,0,0,128,63,146,34,0,188,106,34,2,65,255,255,255,3,74,13,0,32,0,32,6,16,173,128,128,128,0,15,11,32,2,190,15,11,67,194,98,74,64,33,3,11,32,3,11,128,4,2,3,125,2,127,2,64,
      67,0,0,128,63,67,0,0,128,191,32,1,32,1,67,0,0,128,191,93,27,32,1,67,0,0,128,63,94,27,34,1,32,0,42,2,92,34,2,95,69,13,0,32,0,42,2,124,15,11,2,64,2,64,2,64,2,64,32,1,32,0,65,248,0,106,42,2,0,34,3,96,13,0,
      32,0,65,224,0,106,42,2,0,33,4,32,1,32,2,96,69,13,1,32,1,32,4,95,69,13,1,65,0,33,5,65,1,33,6,32,4,33,3,12,2,11,32,0,65,152,1,106,42,2,0,15,11,32,0,65,228,0,106,42,2,0,33,2,2,64,32,1,32,4,96,69,13,0,32,1,
      32,2,95,69,13,0,65,1,33,5,65,2,33,6,32,2,33,3,32,4,33,2,12,1,11,32,0,65,232,0,106,42,2,0,33,4,2,64,32,1,32,2,96,69,13,0,32,1,32,4,95,69,13,0,65,2,33,5,65,3,33,6,32,4,33,3,12,1,11,32,0,65,236,0,106,42,2,
      0,33,2,2,64,32,1,32,4,96,69,13,0,32,1,32,2,95,69,13,0,65,3,33,5,65,4,33,6,32,2,33,3,32,4,33,2,12,1,11,32,0,65,240,0,106,42,2,0,33,4,2,64,32,1,32,2,96,69,13,0,32,1,32,4,95,69,13,0,65,4,33,5,65,5,33,6,32,
      4,33,3,12,1,11,32,0,65,244,0,106,42,2,0,33,2,2,64,32,1,32,4,96,69,13,0,32,1,32,2,95,69,13,0,65,5,33,5,65,6,33,6,32,2,33,3,32,4,33,2,12,1,11,32,1,32,2,96,69,13,1,32,1,32,3,95,69,13,1,65,6,33,5,65,7,33,6,
      11,2,64,32,3,32,2,147,34,3,139,67,23,183,209,56,93,69,13,0,32,0,32,5,65,2,116,106,65,252,0,106,42,2,0,15,11,32,0,65,252,0,106,34,0,32,5,65,2,116,106,42,2,0,34,4,67,0,0,128,63,67,0,0,0,0,32,1,32,2,147,32,
      3,149,34,1,32,1,67,0,0,0,0,93,27,32,1,67,0,0,128,63,94,27,32,0,32,6,65,2,116,106,42,2,0,32,4,147,148,146,15,11,32,0,65,152,1,106,42,2,0,11,160,1,0,2,64,2,64,2,64,32,1,65,128,1,72,13,0,32,0,67,0,0,0,127,
      148,33,0,32,1,65,254,1,75,13,1,32,1,65,129,127,106,33,1,12,2,11,32,1,65,130,127,78,13,1,32,0,67,0,0,128,12,148,33,0,2,64,32,1,65,155,126,77,13,0,32,1,65,230,0,106,33,1,12,2,11,32,0,67,0,0,128,12,148,33,
      0,32,1,65,182,125,32,1,65,182,125,74,27,65,204,1,106,33,1,12,1,11,32,0,67,0,0,0,127,148,33,0,32,1,65,253,2,32,1,65,253,2,72,27,65,130,126,106,33,1,11,32,0,32,1,65,23,116,65,128,128,128,252,3,106,190,148,
      11,11,142,128,128,128,0,1,0,65,0,11,8,0,0,0,0,0,0,0,0,0,186,137,128,128,0,7,108,105,110,107,105,110,103,2,8,142,137,128,128,0,47,0,32,0,20,95,115,101,110,100,69,118,101,110,116,95,105,110,112,117,116,71,
      97,105,110,0,32,1,21,95,115,101,110,100,69,118,101,110,116,95,109,97,107,101,117,112,71,97,105,110,0,32,2,14,95,115,101,110,100,69,118,101,110,116,95,109,105,120,0,32,3,21,95,115,101,110,100,69,118,101,
      110,116,95,97,116,116,97,99,107,66,97,115,101,0,32,4,22,95,115,101,110,100,69,118,101,110,116,95,114,101,108,101,97,115,101,66,97,115,101,0,32,5,22,95,115,101,110,100,69,118,101,110,116,95,97,116,116,97,
      99,107,68,101,112,116,104,0,32,6,23,95,115,101,110,100,69,118,101,110,116,95,114,101,108,101,97,115,101,68,101,112,116,104,0,32,7,17,95,115,101,110,100,69,118,101,110,116,95,99,111,109,112,48,120,0,32,
      8,17,95,115,101,110,100,69,118,101,110,116,95,99,111,109,112,48,121,0,32,9,17,95,115,101,110,100,69,118,101,110,116,95,99,111,109,112,49,120,0,32,10,17,95,115,101,110,100,69,118,101,110,116,95,99,111,109,
      112,49,121,0,32,11,17,95,115,101,110,100,69,118,101,110,116,95,99,111,109,112,50,120,0,32,12,17,95,115,101,110,100,69,118,101,110,116,95,99,111,109,112,50,121,0,32,13,17,95,115,101,110,100,69,118,101,110,
      116,95,99,111,109,112,51,120,0,32,14,17,95,115,101,110,100,69,118,101,110,116,95,99,111,109,112,51,121,0,32,15,17,95,115,101,110,100,69,118,101,110,116,95,99,111,109,112,52,120,0,32,16,17,95,115,101,110,
      100,69,118,101,110,116,95,99,111,109,112,52,121,0,32,17,17,95,115,101,110,100,69,118,101,110,116,95,99,111,109,112,53,120,0,32,18,17,95,115,101,110,100,69,118,101,110,116,95,99,111,109,112,53,121,0,32,
      19,17,95,115,101,110,100,69,118,101,110,116,95,99,111,109,112,54,120,0,32,20,17,95,115,101,110,100,69,118,101,110,116,95,99,111,109,112,54,121,0,32,21,17,95,115,101,110,100,69,118,101,110,116,95,99,111,
      109,112,55,120,0,32,22,17,95,115,101,110,100,69,118,101,110,116,95,99,111,109,112,55,121,0,32,23,27,95,115,101,110,100,69,118,101,110,116,95,119,97,118,101,115,104,97,112,101,114,65,109,111,117,110,116,
      0,32,24,17,95,115,101,110,100,69,118,101,110,116,95,119,97,118,101,48,120,0,32,25,17,95,115,101,110,100,69,118,101,110,116,95,119,97,118,101,48,121,0,32,26,17,95,115,101,110,100,69,118,101,110,116,95,119,
      97,118,101,49,120,0,32,27,17,95,115,101,110,100,69,118,101,110,116,95,119,97,118,101,49,121,0,32,28,17,95,115,101,110,100,69,118,101,110,116,95,119,97,118,101,50,120,0,32,29,17,95,115,101,110,100,69,118,
      101,110,116,95,119,97,118,101,50,121,0,32,30,17,95,115,101,110,100,69,118,101,110,116,95,119,97,118,101,51,120,0,32,31,17,95,115,101,110,100,69,118,101,110,116,95,119,97,118,101,51,121,0,32,32,17,95,115,
      101,110,100,69,118,101,110,116,95,119,97,118,101,52,120,0,32,33,17,95,115,101,110,100,69,118,101,110,116,95,119,97,118,101,52,121,0,32,34,17,95,115,101,110,100,69,118,101,110,116,95,119,97,118,101,53,120,
      0,32,35,17,95,115,101,110,100,69,118,101,110,116,95,119,97,118,101,53,121,0,32,36,17,95,115,101,110,100,69,118,101,110,116,95,119,97,118,101,54,120,0,32,37,17,95,115,101,110,100,69,118,101,110,116,95,119,
      97,118,101,54,121,0,32,38,17,95,115,101,110,100,69,118,101,110,116,95,119,97,118,101,55,120,0,32,39,17,95,115,101,110,100,69,118,101,110,116,95,119,97,118,101,55,121,0,32,40,10,105,110,105,116,105,97,108,
      105,115,101,1,2,14,46,76,103,95,95,102,114,101,113,117,101,110,99,121,0,0,8,0,32,41,12,97,100,118,97,110,99,101,66,108,111,99,107,0,2,42,56,46,76,115,116,100,95,95,105,110,116,114,105,110,115,105,99,115,
      95,95,105,110,116,101,114,110,97,108,95,95,109,97,116,104,95,105,109,112,108,101,109,101,110,116,97,116,105,111,110,115,95,95,101,120,112,95,48,0,2,43,54,46,76,115,116,100,95,95,105,110,116,114,105,110,
      115,105,99,115,95,95,105,110,116,101,114,110,97,108,95,95,109,97,116,104,95,105,109,112,108,101,109,101,110,116,97,116,105,111,110,115,95,95,112,111,119,0,2,44,48,46,76,76,85,84,67,111,109,112,114,101,
      115,115,111,114,95,95,72,81,69,110,118,101,108,111,112,101,67,111,109,112,114,101,115,115,111,114,95,95,119,97,118,101,115,104,97,112,101,0,2,45,67,46,76,115,116,100,95,95,105,110,116,114,105,110,115,105,
      99,115,95,95,105,110,116,101,114,110,97,108,95,95,109,97,116,104,95,105,109,112,108,101,109,101,110,116,97,116,105,111,110,115,95,95,104,101,108,112,101,114,115,95,95,115,99,97,108,98,110,102,5,151,128,
      128,128,0,1,19,46,98,115,115,46,46,76,103,95,95,102,114,101,113,117,101,110,99,121,3,0,0,183,128,128,128,0,10,114,101,108,111,99,46,67,79,68,69,5,10,3,206,11,41,0,3,160,16,41,0,0,233,23,43,0,141,24,44,
      0,233,29,43,0,211,30,43,0,226,34,44,0,216,35,45,0,231,35,45,0,162,75,46,0,181,128,128,128,0,15,116,97,114,103,101,116,95,102,101,97,116,117,114,101,115,3,43,15,109,117,116,97,98,108,101,45,103,108,111,
      98,97,108,115,43,8,115,105,103,110,45,101,120,116,43,7,115,105,109,100,49,50,56,]);
  }

  /** @access private */
  _getWasmBytesNonSIMD()
  {
    return new Uint8Array([0,97,115,109,1,0,0,0,1,164,128,128,128,0,6,96,2,127,125,0,96,4,127,127,127,124,0,96,3,127,127,127,0,96,1,125,1,125,96,2,127,125,1,125,96,2,125,127,1,125,2,152,128,128,128,0,1,3,101,
      110,118,15,95,95,108,105,110,101,97,114,95,109,101,109,111,114,121,2,0,1,3,175,128,128,128,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,4,5,7,223,134,128,
      128,0,42,20,95,115,101,110,100,69,118,101,110,116,95,105,110,112,117,116,71,97,105,110,0,0,21,95,115,101,110,100,69,118,101,110,116,95,109,97,107,101,117,112,71,97,105,110,0,1,14,95,115,101,110,100,69,
      118,101,110,116,95,109,105,120,0,2,21,95,115,101,110,100,69,118,101,110,116,95,97,116,116,97,99,107,66,97,115,101,0,3,22,95,115,101,110,100,69,118,101,110,116,95,114,101,108,101,97,115,101,66,97,115,101,
      0,4,22,95,115,101,110,100,69,118,101,110,116,95,97,116,116,97,99,107,68,101,112,116,104,0,5,23,95,115,101,110,100,69,118,101,110,116,95,114,101,108,101,97,115,101,68,101,112,116,104,0,6,17,95,115,101,110,
      100,69,118,101,110,116,95,99,111,109,112,48,120,0,7,17,95,115,101,110,100,69,118,101,110,116,95,99,111,109,112,48,121,0,8,17,95,115,101,110,100,69,118,101,110,116,95,99,111,109,112,49,120,0,9,17,95,115,
      101,110,100,69,118,101,110,116,95,99,111,109,112,49,121,0,10,17,95,115,101,110,100,69,118,101,110,116,95,99,111,109,112,50,120,0,11,17,95,115,101,110,100,69,118,101,110,116,95,99,111,109,112,50,121,0,12,
      17,95,115,101,110,100,69,118,101,110,116,95,99,111,109,112,51,120,0,13,17,95,115,101,110,100,69,118,101,110,116,95,99,111,109,112,51,121,0,14,17,95,115,101,110,100,69,118,101,110,116,95,99,111,109,112,
      52,120,0,15,17,95,115,101,110,100,69,118,101,110,116,95,99,111,109,112,52,121,0,16,17,95,115,101,110,100,69,118,101,110,116,95,99,111,109,112,53,120,0,17,17,95,115,101,110,100,69,118,101,110,116,95,99,
      111,109,112,53,121,0,18,17,95,115,101,110,100,69,118,101,110,116,95,99,111,109,112,54,120,0,19,17,95,115,101,110,100,69,118,101,110,116,95,99,111,109,112,54,121,0,20,17,95,115,101,110,100,69,118,101,110,
      116,95,99,111,109,112,55,120,0,21,17,95,115,101,110,100,69,118,101,110,116,95,99,111,109,112,55,121,0,22,27,95,115,101,110,100,69,118,101,110,116,95,119,97,118,101,115,104,97,112,101,114,65,109,111,117,
      110,116,0,23,17,95,115,101,110,100,69,118,101,110,116,95,119,97,118,101,48,120,0,24,17,95,115,101,110,100,69,118,101,110,116,95,119,97,118,101,48,121,0,25,17,95,115,101,110,100,69,118,101,110,116,95,119,
      97,118,101,49,120,0,26,17,95,115,101,110,100,69,118,101,110,116,95,119,97,118,101,49,121,0,27,17,95,115,101,110,100,69,118,101,110,116,95,119,97,118,101,50,120,0,28,17,95,115,101,110,100,69,118,101,110,
      116,95,119,97,118,101,50,121,0,29,17,95,115,101,110,100,69,118,101,110,116,95,119,97,118,101,51,120,0,30,17,95,115,101,110,100,69,118,101,110,116,95,119,97,118,101,51,121,0,31,17,95,115,101,110,100,69,
      118,101,110,116,95,119,97,118,101,52,120,0,32,17,95,115,101,110,100,69,118,101,110,116,95,119,97,118,101,52,121,0,33,17,95,115,101,110,100,69,118,101,110,116,95,119,97,118,101,53,120,0,34,17,95,115,101,
      110,100,69,118,101,110,116,95,119,97,118,101,53,121,0,35,17,95,115,101,110,100,69,118,101,110,116,95,119,97,118,101,54,120,0,36,17,95,115,101,110,100,69,118,101,110,116,95,119,97,118,101,54,121,0,37,17,
      95,115,101,110,100,69,118,101,110,116,95,119,97,118,101,55,120,0,38,17,95,115,101,110,100,69,118,101,110,116,95,119,97,118,101,55,121,0,39,10,105,110,105,116,105,97,108,105,115,101,0,40,12,97,100,118,97,
      110,99,101,66,108,111,99,107,0,41,12,129,128,128,128,0,1,10,211,208,128,128,0,46,12,0,32,0,65,24,106,32,1,56,2,0,11,12,0,32,0,65,28,106,32,1,56,2,0,11,12,0,32,0,65,32,106,32,1,56,2,0,11,12,0,32,0,65,36,
      106,32,1,56,2,0,11,12,0,32,0,65,40,106,32,1,56,2,0,11,12,0,32,0,65,44,106,32,1,56,2,0,11,12,0,32,0,65,48,106,32,1,56,2,0,11,40,0,32,0,65,52,106,67,0,0,0,0,67,0,0,112,194,32,1,32,1,67,0,0,112,194,93,27,
      32,1,67,0,0,0,0,94,27,56,2,0,11,41,0,32,0,65,212,0,106,67,0,0,0,0,67,0,0,112,194,32,1,32,1,67,0,0,112,194,93,27,32,1,67,0,0,0,0,94,27,56,2,0,11,40,0,32,0,65,56,106,67,0,0,0,0,67,0,0,112,194,32,1,32,1,67,
      0,0,112,194,93,27,32,1,67,0,0,0,0,94,27,56,2,0,11,41,0,32,0,65,216,0,106,67,0,0,0,0,67,0,0,112,194,32,1,32,1,67,0,0,112,194,93,27,32,1,67,0,0,0,0,94,27,56,2,0,11,40,0,32,0,65,60,106,67,0,0,0,0,67,0,0,112,
      194,32,1,32,1,67,0,0,112,194,93,27,32,1,67,0,0,0,0,94,27,56,2,0,11,41,0,32,0,65,220,0,106,67,0,0,0,0,67,0,0,112,194,32,1,32,1,67,0,0,112,194,93,27,32,1,67,0,0,0,0,94,27,56,2,0,11,41,0,32,0,65,192,0,106,
      67,0,0,0,0,67,0,0,112,194,32,1,32,1,67,0,0,112,194,93,27,32,1,67,0,0,0,0,94,27,56,2,0,11,41,0,32,0,65,224,0,106,67,0,0,0,0,67,0,0,112,194,32,1,32,1,67,0,0,112,194,93,27,32,1,67,0,0,0,0,94,27,56,2,0,11,
      41,0,32,0,65,196,0,106,67,0,0,0,0,67,0,0,112,194,32,1,32,1,67,0,0,112,194,93,27,32,1,67,0,0,0,0,94,27,56,2,0,11,41,0,32,0,65,228,0,106,67,0,0,0,0,67,0,0,112,194,32,1,32,1,67,0,0,112,194,93,27,32,1,67,0,
      0,0,0,94,27,56,2,0,11,41,0,32,0,65,200,0,106,67,0,0,0,0,67,0,0,112,194,32,1,32,1,67,0,0,112,194,93,27,32,1,67,0,0,0,0,94,27,56,2,0,11,41,0,32,0,65,232,0,106,67,0,0,0,0,67,0,0,112,194,32,1,32,1,67,0,0,112,
      194,93,27,32,1,67,0,0,0,0,94,27,56,2,0,11,41,0,32,0,65,204,0,106,67,0,0,0,0,67,0,0,112,194,32,1,32,1,67,0,0,112,194,93,27,32,1,67,0,0,0,0,94,27,56,2,0,11,41,0,32,0,65,236,0,106,67,0,0,0,0,67,0,0,112,194,
      32,1,32,1,67,0,0,112,194,93,27,32,1,67,0,0,0,0,94,27,56,2,0,11,41,0,32,0,65,208,0,106,67,0,0,0,0,67,0,0,112,194,32,1,32,1,67,0,0,112,194,93,27,32,1,67,0,0,0,0,94,27,56,2,0,11,41,0,32,0,65,240,0,106,67,
      0,0,0,0,67,0,0,112,194,32,1,32,1,67,0,0,112,194,93,27,32,1,67,0,0,0,0,94,27,56,2,0,11,41,0,32,0,65,180,1,106,67,0,0,128,63,67,0,0,0,0,32,1,32,1,67,0,0,0,0,93,27,32,1,67,0,0,128,63,94,27,56,2,0,11,41,0,
      32,0,65,244,0,106,67,0,0,128,63,67,0,0,128,191,32,1,32,1,67,0,0,128,191,93,27,32,1,67,0,0,128,63,94,27,56,2,0,11,41,0,32,0,65,148,1,106,67,0,0,128,63,67,0,0,128,191,32,1,32,1,67,0,0,128,191,93,27,32,1,
      67,0,0,128,63,94,27,56,2,0,11,41,0,32,0,65,248,0,106,67,0,0,128,63,67,0,0,128,191,32,1,32,1,67,0,0,128,191,93,27,32,1,67,0,0,128,63,94,27,56,2,0,11,41,0,32,0,65,152,1,106,67,0,0,128,63,67,0,0,128,191,32,
      1,32,1,67,0,0,128,191,93,27,32,1,67,0,0,128,63,94,27,56,2,0,11,41,0,32,0,65,252,0,106,67,0,0,128,63,67,0,0,128,191,32,1,32,1,67,0,0,128,191,93,27,32,1,67,0,0,128,63,94,27,56,2,0,11,41,0,32,0,65,156,1,106,
      67,0,0,128,63,67,0,0,128,191,32,1,32,1,67,0,0,128,191,93,27,32,1,67,0,0,128,63,94,27,56,2,0,11,41,0,32,0,65,128,1,106,67,0,0,128,63,67,0,0,128,191,32,1,32,1,67,0,0,128,191,93,27,32,1,67,0,0,128,63,94,27,
      56,2,0,11,41,0,32,0,65,160,1,106,67,0,0,128,63,67,0,0,128,191,32,1,32,1,67,0,0,128,191,93,27,32,1,67,0,0,128,63,94,27,56,2,0,11,41,0,32,0,65,132,1,106,67,0,0,128,63,67,0,0,128,191,32,1,32,1,67,0,0,128,
      191,93,27,32,1,67,0,0,128,63,94,27,56,2,0,11,41,0,32,0,65,164,1,106,67,0,0,128,63,67,0,0,128,191,32,1,32,1,67,0,0,128,191,93,27,32,1,67,0,0,128,63,94,27,56,2,0,11,41,0,32,0,65,136,1,106,67,0,0,128,63,67,
      0,0,128,191,32,1,32,1,67,0,0,128,191,93,27,32,1,67,0,0,128,63,94,27,56,2,0,11,41,0,32,0,65,168,1,106,67,0,0,128,63,67,0,0,128,191,32,1,32,1,67,0,0,128,191,93,27,32,1,67,0,0,128,63,94,27,56,2,0,11,41,0,
      32,0,65,140,1,106,67,0,0,128,63,67,0,0,128,191,32,1,32,1,67,0,0,128,191,93,27,32,1,67,0,0,128,63,94,27,56,2,0,11,41,0,32,0,65,172,1,106,67,0,0,128,63,67,0,0,128,191,32,1,32,1,67,0,0,128,191,93,27,32,1,
      67,0,0,128,63,94,27,56,2,0,11,41,0,32,0,65,144,1,106,67,0,0,128,63,67,0,0,128,191,32,1,32,1,67,0,0,128,191,93,27,32,1,67,0,0,128,63,94,27,56,2,0,11,41,0,32,0,65,176,1,106,67,0,0,128,63,67,0,0,128,191,32,
      1,32,1,67,0,0,128,191,93,27,32,1,67,0,0,128,63,94,27,56,2,0,11,164,4,0,65,0,32,3,57,3,128,128,128,128,0,32,0,65,240,247,12,106,65,242,242,255,251,3,54,2,0,32,0,65,176,1,106,66,128,128,128,252,3,55,2,0,
      32,0,65,168,1,106,66,128,128,128,248,179,230,204,153,63,55,2,0,32,0,65,160,1,106,66,154,179,230,244,171,179,230,204,62,55,2,0,32,0,65,152,1,106,66,179,230,204,249,139,128,128,128,191,127,55,2,0,32,0,65,
      144,1,106,66,128,128,128,252,131,128,128,192,191,127,55,2,0,32,0,65,136,1,106,66,128,128,128,248,179,230,204,153,63,55,2,0,32,0,65,128,1,106,66,154,179,230,244,171,179,230,204,62,55,2,0,32,0,65,248,0,106,
      66,179,230,204,249,139,128,128,128,191,127,55,2,0,32,0,65,240,0,106,66,128,128,128,137,140,128,128,192,191,127,55,2,0,32,0,65,232,0,106,66,128,128,192,141,140,128,128,184,65,55,2,0,32,0,65,224,0,106,66,
      128,128,208,144,140,128,128,248,65,55,2,0,32,0,65,216,0,106,66,128,128,192,146,140,128,128,154,66,55,2,0,32,0,65,208,0,106,66,128,128,128,128,128,128,128,184,66,55,2,0,32,0,65,200,0,106,66,128,128,128,
      137,140,128,128,208,64,55,2,0,32,0,65,192,0,106,66,128,128,192,143,140,128,128,208,65,55,2,0,32,0,65,56,106,66,128,128,160,146,140,128,128,144,66,55,2,0,32,0,65,48,106,66,128,128,128,252,131,128,128,184,
      66,55,2,0,32,0,65,40,106,66,128,128,160,146,132,128,128,128,63,55,2,0,32,0,65,32,106,66,128,128,128,252,131,128,128,208,192,0,55,2,0,32,0,65,24,106,66,0,55,2,0,32,0,65,224,1,106,65,0,54,2,0,32,0,65,212,
      1,106,65,0,54,2,0,32,0,65,216,1,106,66,174,231,0,55,2,0,32,0,65,184,1,106,66,128,128,192,147,140,128,128,184,66,55,2,0,32,0,65,192,1,106,65,128,128,128,252,3,54,2,0,32,0,65,204,1,106,66,0,55,2,0,32,0,65,
      196,1,106,66,0,55,2,0,32,0,65,232,247,12,106,66,0,55,2,0,32,0,65,224,247,12,106,66,0,55,2,0,32,0,65,216,247,12,106,66,0,55,2,0,32,0,65,208,247,12,106,66,0,55,2,0,32,0,65,200,247,12,106,66,0,55,2,0,11,181,
      50,19,1,127,2,125,1,127,1,124,1,127,1,124,1,126,1,127,1,124,6,127,2,125,3,127,1,124,1,127,2,125,1,124,2,127,2,124,19,125,2,64,32,0,40,2,0,34,3,32,2,70,13,0,2,64,2,64,65,0,43,3,128,128,128,128,0,182,34,
      4,67,154,153,153,62,148,34,5,139,67,0,0,0,79,93,69,13,0,32,5,168,33,6,12,1,11,65,128,128,128,128,120,33,6,11,68,0,0,0,0,0,0,240,191,32,4,187,68,45,67,28,235,226,54,26,63,162,163,34,7,68,239,57,250,254,
      66,46,134,64,100,33,8,32,7,68,0,0,0,0,0,0,224,127,162,33,9,2,64,2,64,32,7,68,254,130,43,101,71,21,247,63,162,68,0,0,0,0,0,0,224,63,68,0,0,0,0,0,0,224,191,32,7,189,34,10,66,127,85,34,11,27,160,34,12,153,
      68,0,0,0,0,0,0,224,65,99,69,13,0,32,12,170,33,13,12,1,11,65,128,128,128,128,120,33,13,11,32,6,65,174,231,0,72,33,14,32,9,68,0,0,0,0,0,0,0,0,32,8,27,33,9,32,7,32,7,98,33,15,65,1,65,127,32,11,27,33,16,32,
      10,66,32,136,167,65,255,255,255,255,7,113,34,11,65,177,197,194,255,3,75,33,17,32,8,32,7,68,81,48,45,213,16,73,135,192,99,114,33,8,32,0,65,196,1,106,33,18,67,210,83,251,193,32,4,149,33,19,2,64,2,64,32,4,
      67,0,0,240,65,149,34,20,139,67,0,0,0,79,93,69,13,0,32,20,168,33,21,12,1,11,65,128,128,128,128,120,33,21,11,32,0,65,4,106,33,22,32,6,65,174,231,0,32,14,27,33,23,32,7,32,9,32,15,27,33,24,32,13,32,16,32,17,
      27,33,17,32,15,32,8,114,33,25,32,0,65,212,0,106,33,15,32,0,65,24,106,33,6,67,0,0,128,191,32,5,149,33,26,32,19,67,0,0,128,63,146,33,27,32,7,68,0,0,0,0,0,0,240,63,160,33,28,32,11,65,171,198,152,132,4,73,
      33,16,32,11,65,194,220,216,254,3,75,33,29,32,11,65,128,128,192,241,3,75,33,30,32,18,65,8,106,33,14,3,64,2,64,2,64,32,0,40,2,132,248,12,34,11,65,127,71,13,0,67,0,0,0,0,33,5,67,0,0,0,0,33,19,12,1,11,32,1,
      32,3,65,3,116,106,34,3,42,2,4,67,0,0,0,0,146,33,5,32,3,42,2,0,67,0,0,0,0,146,33,19,2,64,32,11,65,0,74,13,0,32,0,32,4,56,2,244,247,12,2,64,2,64,2,64,2,64,2,64,32,16,13,0,32,13,33,3,32,24,33,9,32,25,69,13,
      1,12,4,11,32,17,33,3,32,29,69,13,1,11,32,7,32,3,183,34,9,68,0,0,224,254,66,46,230,191,162,160,34,31,32,9,68,118,60,121,53,239,57,234,61,162,34,32,161,33,9,12,1,11,32,28,33,9,32,30,69,13,1,65,0,33,3,68,
      0,0,0,0,0,0,0,0,33,32,32,7,33,31,32,7,33,9,11,32,31,32,9,32,9,32,9,32,9,162,34,12,32,12,32,12,32,12,32,12,68,208,164,190,114,105,55,102,62,162,68,241,107,210,197,65,189,187,190,160,162,68,44,222,37,175,
      106,86,17,63,160,162,68,147,189,190,22,108,193,102,191,160,162,68,62,85,85,85,85,85,197,63,160,162,161,34,12,162,68,0,0,0,0,0,0,0,64,32,12,161,163,32,32,161,160,68,0,0,0,0,0,0,240,63,160,33,9,2,64,2,64,
      32,3,65,128,8,72,13,0,32,9,68,0,0,0,0,0,0,224,127,162,33,12,2,64,32,3,65,254,15,75,13,0,32,3,65,129,120,106,33,11,12,2,11,32,12,68,0,0,0,0,0,0,224,127,162,33,12,32,3,65,253,23,32,3,65,253,23,72,27,65,130,
      112,106,33,11,12,1,11,32,9,33,12,32,3,33,11,32,3,65,130,120,78,13,0,32,9,68,0,0,0,0,0,0,96,3,162,33,12,2,64,32,3,65,184,112,77,13,0,32,3,65,201,7,106,33,11,12,1,11,32,12,68,0,0,0,0,0,0,96,3,162,33,12,32,
      3,65,240,104,32,3,65,240,104,74,27,65,146,15,106,33,11,11,32,12,32,11,65,255,7,106,173,66,52,134,191,162,32,9,32,3,27,33,9,11,32,0,32,21,54,2,252,247,12,32,0,32,27,56,2,240,247,12,32,0,32,23,54,2,216,1,
      32,0,32,9,182,56,2,248,247,12,32,0,67,0,0,128,63,32,26,16,170,128,128,128,0,147,34,20,56,2,128,248,12,32,0,32,20,56,2,212,1,11,32,5,32,6,42,2,0,67,0,0,160,65,149,16,171,128,128,128,0,34,20,148,34,33,139,
      33,34,2,64,2,64,2,64,32,19,32,20,148,34,35,139,34,20,188,34,3,65,255,255,255,3,74,13,0,2,64,32,3,13,0,67,0,0,128,191,32,35,32,35,148,149,33,36,12,3,11,2,64,32,3,65,0,78,13,0,67,0,0,192,127,33,36,12,3,11,
      32,20,67,0,0,0,76,148,188,33,3,65,232,126,33,11,12,1,11,32,20,33,36,32,3,65,255,255,255,251,7,75,13,1,65,129,127,33,11,67,0,0,0,0,33,36,32,3,65,128,128,128,252,3,70,13,1,11,32,3,65,141,246,171,2,106,34,
      3,65,23,117,32,11,106,178,34,37,67,128,32,154,62,148,32,3,65,255,255,255,3,113,65,243,137,212,249,3,106,190,67,0,0,128,191,146,34,36,32,36,32,36,67,0,0,0,63,148,148,34,38,147,188,65,128,96,113,190,34,39,
      67,0,96,222,62,148,32,36,32,39,147,32,38,147,32,36,32,36,67,0,0,0,64,146,149,34,36,32,38,32,36,32,36,148,34,36,32,36,32,36,148,34,36,67,238,233,145,62,148,67,170,170,42,63,146,148,32,36,32,36,67,38,158,
      120,62,148,67,19,206,204,62,146,148,146,146,148,146,34,36,67,0,96,222,62,148,32,37,67,219,39,84,53,148,32,36,32,39,146,67,217,234,4,184,148,146,146,146,146,33,36,11,67,0,0,112,194,32,36,67,0,0,160,65,148,
      34,36,67,0,0,112,194,32,36,67,0,0,112,194,94,27,32,20,67,172,197,39,55,93,27,33,36,2,64,2,64,2,64,32,34,188,34,3,65,255,255,255,3,74,13,0,2,64,32,3,13,0,67,0,0,128,191,32,33,32,33,148,149,33,38,12,3,11,
      2,64,32,3,65,0,78,13,0,67,0,0,192,127,33,38,12,3,11,32,34,67,0,0,0,76,148,188,33,3,65,232,126,33,11,12,1,11,32,34,33,38,32,3,65,255,255,255,251,7,75,13,1,65,129,127,33,11,67,0,0,0,0,33,38,32,3,65,128,128,
      128,252,3,70,13,1,11,32,3,65,141,246,171,2,106,34,3,65,23,117,32,11,106,178,34,37,67,128,32,154,62,148,32,3,65,255,255,255,3,113,65,243,137,212,249,3,106,190,67,0,0,128,191,146,34,20,32,20,32,20,67,0,0,
      0,63,148,148,34,38,147,188,65,128,96,113,190,34,39,67,0,96,222,62,148,32,20,32,39,147,32,38,147,32,20,32,20,67,0,0,0,64,146,149,34,20,32,38,32,20,32,20,148,34,20,32,20,32,20,148,34,20,67,238,233,145,62,
      148,67,170,170,42,63,146,148,32,20,32,20,67,38,158,120,62,148,67,19,206,204,62,146,148,146,146,148,146,34,20,67,0,96,222,62,148,32,37,67,219,39,84,53,148,32,20,32,39,146,67,217,234,4,184,148,146,146,146,
      146,33,38,11,32,0,42,2,184,1,33,20,32,0,32,20,32,36,32,20,147,67,0,0,128,63,67,0,0,128,191,32,0,42,2,244,247,12,34,39,32,0,65,36,65,40,32,36,32,20,94,27,106,42,2,0,67,111,18,131,58,148,148,149,16,170,128,
      128,128,0,147,148,146,34,36,56,2,184,1,32,0,42,2,188,1,33,20,32,0,32,20,67,0,0,112,194,32,38,67,0,0,160,65,148,34,38,67,0,0,112,194,32,38,67,0,0,112,194,94,27,32,34,67,172,197,39,55,93,27,34,34,32,20,147,
      67,0,0,128,63,67,0,0,128,191,32,39,32,0,65,36,65,40,32,34,32,20,94,27,106,42,2,0,67,111,18,131,58,148,148,149,16,170,128,128,128,0,147,148,146,34,20,56,2,188,1,2,64,2,64,67,0,0,0,0,67,0,0,112,194,32,36,
      32,20,32,36,32,20,94,27,34,20,32,20,67,0,0,112,194,93,27,32,20,67,0,0,0,0,94,27,34,34,32,0,42,2,52,34,36,95,69,13,0,32,15,42,2,0,33,34,12,1,11,2,64,32,34,32,0,42,2,80,34,38,96,13,0,32,0,42,2,56,33,39,2,
      64,2,64,32,34,32,36,96,69,13,0,32,34,32,39,95,69,13,0,65,0,33,3,65,1,33,11,32,39,33,38,12,1,11,32,0,42,2,60,33,36,2,64,32,34,32,39,96,69,13,0,32,34,32,36,95,69,13,0,65,1,33,3,65,2,33,11,32,36,33,38,32,
      39,33,36,12,1,11,32,0,42,2,64,33,39,2,64,32,34,32,36,96,69,13,0,32,34,32,39,95,69,13,0,65,2,33,3,65,3,33,11,32,39,33,38,12,1,11,32,0,42,2,68,33,36,2,64,32,34,32,39,96,69,13,0,32,34,32,36,95,69,13,0,65,
      3,33,3,65,4,33,11,32,36,33,38,32,39,33,36,12,1,11,32,0,42,2,72,33,39,2,64,32,34,32,36,96,69,13,0,32,34,32,39,95,69,13,0,65,4,33,3,65,5,33,11,32,39,33,38,12,1,11,32,0,42,2,76,33,36,2,64,32,34,32,39,96,69,
      13,0,32,34,32,36,95,69,13,0,65,5,33,3,65,6,33,11,32,36,33,38,32,39,33,36,12,1,11,32,34,32,38,95,69,13,1,32,34,32,36,96,69,13,1,65,6,33,3,65,7,33,11,11,2,64,32,38,32,36,147,34,38,139,67,111,18,131,58,93,
      69,13,0,32,15,32,3,65,2,116,106,42,2,0,33,34,12,2,11,32,15,32,3,65,2,116,106,42,2,0,34,39,67,0,0,128,63,67,0,0,0,0,32,34,32,36,147,32,38,149,34,34,32,34,67,0,0,0,0,93,27,32,34,67,0,0,128,63,94,27,32,15,
      32,11,65,2,116,106,42,2,0,32,39,147,148,146,33,34,12,1,11,32,0,42,2,112,33,34,11,32,0,32,34,32,20,147,32,0,42,2,28,146,34,20,67,0,0,32,194,32,20,67,0,0,32,194,94,27,34,38,67,0,0,160,65,149,16,171,128,128,
      128,0,34,20,32,0,42,2,192,1,32,20,147,32,0,42,2,248,247,12,148,146,34,34,56,2,192,1,32,0,42,2,32,34,36,32,33,32,34,148,148,32,33,67,0,0,128,63,32,36,147,34,39,148,146,33,20,32,36,32,35,32,34,148,148,32,
      35,32,39,148,146,33,34,2,64,32,0,42,2,180,1,34,33,67,0,0,0,0,94,69,13,0,67,0,0,128,63,32,33,147,34,35,32,34,148,32,33,32,6,32,34,16,172,128,128,128,0,148,146,33,34,32,35,32,20,148,32,33,32,6,32,20,16,172,
      128,128,128,0,148,146,33,20,11,32,0,42,2,228,247,12,33,33,32,0,32,20,56,2,228,247,12,32,0,42,2,224,247,12,33,35,32,0,32,34,56,2,224,247,12,32,0,32,20,32,33,147,32,0,42,2,240,247,12,34,33,32,0,42,2,236,
      247,12,148,146,34,20,56,2,236,247,12,32,0,32,34,32,35,147,32,33,32,0,42,2,232,247,12,148,146,34,34,56,2,232,247,12,32,0,32,0,42,2,196,1,34,33,32,19,139,34,35,32,33,32,35,94,27,56,2,196,1,32,0,32,0,42,2,
      200,1,34,33,32,5,139,34,35,32,33,32,35,94,27,56,2,200,1,32,0,32,0,42,2,204,1,34,33,32,34,139,34,35,32,33,32,35,94,27,56,2,204,1,32,0,32,0,42,2,208,1,34,33,32,20,139,34,35,32,33,32,35,94,27,56,2,208,1,32,
      0,40,2,220,1,65,174,231,0,111,33,3,2,64,2,64,32,0,40,2,224,1,32,0,40,2,216,1,78,13,0,32,3,65,174,231,0,106,33,11,12,1,11,32,0,32,0,42,2,204,247,12,32,0,32,3,65,174,231,0,106,34,11,32,3,32,3,65,0,72,27,
      65,3,116,106,34,8,65,236,1,106,42,2,0,147,56,2,204,247,12,32,0,32,0,42,2,200,247,12,32,8,65,232,1,106,42,2,0,147,56,2,200,247,12,32,0,32,0,42,2,212,247,12,32,8,65,220,188,6,106,42,2,0,147,56,2,212,247,
      12,32,0,32,0,42,2,208,247,12,32,8,65,216,188,6,106,42,2,0,147,56,2,208,247,12,11,32,0,32,11,32,3,32,3,65,0,72,27,65,3,116,106,34,3,65,236,1,106,32,5,32,5,148,34,5,56,2,0,32,3,65,232,1,106,32,19,32,19,148,
      34,19,56,2,0,32,3,65,216,188,6,106,32,34,32,34,148,34,33,56,2,0,32,22,32,0,40,2,220,1,65,174,231,0,111,34,3,65,174,231,0,106,32,3,32,3,65,0,72,27,65,3,116,106,65,216,188,6,106,32,20,32,20,148,34,35,56,
      2,0,32,0,32,19,32,0,42,2,200,247,12,146,34,19,56,2,200,247,12,32,0,32,33,32,0,42,2,208,247,12,146,34,33,56,2,208,247,12,32,0,32,5,32,0,42,2,204,247,12,146,34,37,56,2,204,247,12,32,0,32,35,32,0,42,2,212,
      247,12,146,34,35,56,2,212,247,12,32,0,32,0,40,2,220,1,65,1,106,34,3,65,0,32,3,32,0,40,2,216,1,34,11,72,27,54,2,220,1,2,64,32,0,40,2,224,1,34,3,32,11,78,13,0,32,0,32,3,65,1,106,34,3,54,2,224,1,11,32,0,32,
      0,40,2,220,247,12,65,1,106,34,11,54,2,220,247,12,32,0,32,0,42,2,216,247,12,34,5,32,38,32,0,42,2,28,147,32,5,147,32,0,42,2,128,248,12,148,146,34,40,56,2,216,247,12,2,64,32,11,32,0,40,2,252,247,12,72,13,
      0,32,3,65,1,32,3,65,1,74,27,33,11,32,0,65,0,54,2,220,247,12,2,64,2,64,2,64,32,0,42,2,196,1,34,36,188,34,3,65,255,255,255,3,74,13,0,2,64,32,36,188,65,255,255,255,255,7,113,13,0,67,0,0,128,191,32,36,32,36,
      148,149,33,41,12,3,11,2,64,32,3,65,0,78,13,0,67,0,0,192,127,33,41,12,3,11,32,36,67,0,0,0,76,148,188,33,3,65,232,126,33,8,12,1,11,32,36,33,41,32,3,65,255,255,255,251,7,75,13,1,65,129,127,33,8,67,0,0,0,0,
      33,41,32,3,65,128,128,128,252,3,70,13,1,11,32,3,65,141,246,171,2,106,34,3,65,23,117,32,8,106,178,34,42,67,128,32,154,62,148,32,3,65,255,255,255,3,113,65,243,137,212,249,3,106,190,67,0,0,128,191,146,34,
      5,32,5,32,5,67,0,0,0,63,148,148,34,38,147,188,65,128,96,113,190,34,39,67,0,96,222,62,148,32,5,32,39,147,32,38,147,32,5,32,5,67,0,0,0,64,146,149,34,5,32,38,32,5,32,5,148,34,5,32,5,32,5,148,34,5,67,238,233,
      145,62,148,67,170,170,42,63,146,148,32,5,32,5,67,38,158,120,62,148,67,19,206,204,62,146,148,146,146,148,146,34,5,67,0,96,222,62,148,32,42,67,219,39,84,53,148,32,5,32,39,146,67,217,234,4,184,148,146,146,
      146,146,33,41,11,32,11,178,33,5,2,64,2,64,2,64,32,0,42,2,200,1,34,38,188,34,3,65,255,255,255,3,74,13,0,2,64,32,38,188,65,255,255,255,255,7,113,13,0,67,0,0,128,191,32,38,32,38,148,149,33,43,12,3,11,2,64,
      32,3,65,0,78,13,0,67,0,0,192,127,33,43,12,3,11,32,38,67,0,0,0,76,148,188,33,3,65,232,126,33,11,12,1,11,32,38,33,43,32,3,65,255,255,255,251,7,75,13,1,65,129,127,33,11,67,0,0,0,0,33,43,32,3,65,128,128,128,
      252,3,70,13,1,11,32,3,65,141,246,171,2,106,34,3,65,23,117,32,11,106,178,34,43,67,128,32,154,62,148,32,3,65,255,255,255,3,113,65,243,137,212,249,3,106,190,67,0,0,128,191,146,34,39,32,39,32,39,67,0,0,0,63,
      148,148,34,42,147,188,65,128,96,113,190,34,44,67,0,96,222,62,148,32,39,32,44,147,32,42,147,32,39,32,39,67,0,0,0,64,146,149,34,39,32,42,32,39,32,39,148,34,39,32,39,32,39,148,34,39,67,238,233,145,62,148,
      67,170,170,42,63,146,148,32,39,32,39,67,38,158,120,62,148,67,19,206,204,62,146,148,146,146,148,146,34,39,67,0,96,222,62,148,32,43,67,219,39,84,53,148,32,39,32,44,146,67,217,234,4,184,148,146,146,146,146,
      33,43,11,32,19,32,5,149,33,19,2,64,2,64,2,64,32,0,42,2,204,1,34,39,188,34,3,65,255,255,255,3,74,13,0,2,64,32,39,188,65,255,255,255,255,7,113,13,0,67,0,0,128,191,32,39,32,39,148,149,33,45,12,3,11,2,64,32,
      3,65,0,78,13,0,67,0,0,192,127,33,45,12,3,11,32,39,67,0,0,0,76,148,188,33,3,65,232,126,33,11,12,1,11,32,39,33,45,32,3,65,255,255,255,251,7,75,13,1,65,129,127,33,11,67,0,0,0,0,33,45,32,3,65,128,128,128,252,
      3,70,13,1,11,32,3,65,141,246,171,2,106,34,3,65,23,117,32,11,106,178,34,46,67,128,32,154,62,148,32,3,65,255,255,255,3,113,65,243,137,212,249,3,106,190,67,0,0,128,191,146,34,42,32,42,32,42,67,0,0,0,63,148,
      148,34,44,147,188,65,128,96,113,190,34,45,67,0,96,222,62,148,32,42,32,45,147,32,44,147,32,42,32,42,67,0,0,0,64,146,149,34,42,32,44,32,42,32,42,148,34,42,32,42,32,42,148,34,42,67,238,233,145,62,148,67,170,
      170,42,63,146,148,32,42,32,42,67,38,158,120,62,148,67,19,206,204,62,146,148,146,146,148,146,34,42,67,0,96,222,62,148,32,46,67,219,39,84,53,148,32,42,32,45,146,67,217,234,4,184,148,146,146,146,146,33,45,
      11,32,37,32,5,149,33,42,32,19,145,33,19,2,64,2,64,2,64,32,0,42,2,208,1,34,37,188,34,3,65,255,255,255,3,74,13,0,2,64,32,37,188,65,255,255,255,255,7,113,13,0,67,0,0,128,191,32,37,32,37,148,149,33,46,12,3,
      11,2,64,32,3,65,0,78,13,0,67,0,0,192,127,33,46,12,3,11,32,37,67,0,0,0,76,148,188,33,3,65,232,126,33,11,12,1,11,32,37,33,46,32,3,65,255,255,255,251,7,75,13,1,65,129,127,33,11,67,0,0,0,0,33,46,32,3,65,128,
      128,128,252,3,70,13,1,11,32,3,65,141,246,171,2,106,34,3,65,23,117,32,11,106,178,34,47,67,128,32,154,62,148,32,3,65,255,255,255,3,113,65,243,137,212,249,3,106,190,67,0,0,128,191,146,34,44,32,44,32,44,67,
      0,0,0,63,148,148,34,46,147,188,65,128,96,113,190,34,48,67,0,96,222,62,148,32,44,32,48,147,32,46,147,32,44,32,44,67,0,0,0,64,146,149,34,44,32,46,32,44,32,44,148,34,44,32,44,32,44,148,34,44,67,238,233,145,
      62,148,67,170,170,42,63,146,148,32,44,32,44,67,38,158,120,62,148,67,19,206,204,62,146,148,146,146,148,146,34,44,67,0,96,222,62,148,32,47,67,219,39,84,53,148,32,44,32,48,146,67,217,234,4,184,148,146,146,
      146,146,33,46,11,32,33,32,5,149,33,44,32,42,145,33,33,2,64,2,64,2,64,32,19,188,34,3,65,255,255,255,3,74,13,0,2,64,32,19,188,65,255,255,255,255,7,113,13,0,67,0,0,128,191,32,19,32,19,148,149,33,48,12,3,11,
      2,64,32,3,65,0,78,13,0,67,0,0,192,127,33,48,12,3,11,32,19,67,0,0,0,76,148,188,33,3,65,232,126,33,11,12,1,11,32,19,33,48,32,3,65,255,255,255,251,7,75,13,1,65,129,127,33,11,67,0,0,0,0,33,48,32,3,65,128,128,
      128,252,3,70,13,1,11,32,3,65,141,246,171,2,106,34,3,65,23,117,32,11,106,178,34,49,67,128,32,154,62,148,32,3,65,255,255,255,3,113,65,243,137,212,249,3,106,190,67,0,0,128,191,146,34,42,32,42,32,42,67,0,0,
      0,63,148,148,34,48,147,188,65,128,96,113,190,34,47,67,0,96,222,62,148,32,42,32,47,147,32,48,147,32,42,32,42,67,0,0,0,64,146,149,34,42,32,48,32,42,32,42,148,34,42,32,42,32,42,148,34,42,67,238,233,145,62,
      148,67,170,170,42,63,146,148,32,42,32,42,67,38,158,120,62,148,67,19,206,204,62,146,148,146,146,148,146,34,42,67,0,96,222,62,148,32,49,67,219,39,84,53,148,32,42,32,47,146,67,217,234,4,184,148,146,146,146,
      146,33,48,11,32,35,32,5,149,33,35,32,44,145,33,5,2,64,2,64,2,64,32,33,188,34,3,65,255,255,255,3,74,13,0,2,64,32,33,188,65,255,255,255,255,7,113,13,0,67,0,0,128,191,32,33,32,33,148,149,33,44,12,3,11,2,64,
      32,3,65,0,78,13,0,67,0,0,192,127,33,44,12,3,11,32,33,67,0,0,0,76,148,188,33,3,65,232,126,33,11,12,1,11,32,33,33,44,32,3,65,255,255,255,251,7,75,13,1,65,129,127,33,11,67,0,0,0,0,33,44,32,3,65,128,128,128,
      252,3,70,13,1,11,32,3,65,141,246,171,2,106,34,3,65,23,117,32,11,106,178,34,49,67,128,32,154,62,148,32,3,65,255,255,255,3,113,65,243,137,212,249,3,106,190,67,0,0,128,191,146,34,42,32,42,32,42,67,0,0,0,63,
      148,148,34,44,147,188,65,128,96,113,190,34,47,67,0,96,222,62,148,32,42,32,47,147,32,44,147,32,42,32,42,67,0,0,0,64,146,149,34,42,32,44,32,42,32,42,148,34,42,32,42,32,42,148,34,42,67,238,233,145,62,148,
      67,170,170,42,63,146,148,32,42,32,42,67,38,158,120,62,148,67,19,206,204,62,146,148,146,146,148,146,34,42,67,0,96,222,62,148,32,49,67,219,39,84,53,148,32,42,32,47,146,67,217,234,4,184,148,146,146,146,146,
      33,44,11,32,35,145,33,35,2,64,2,64,2,64,32,5,188,34,3,65,255,255,255,3,74,13,0,2,64,32,5,188,65,255,255,255,255,7,113,13,0,67,0,0,128,191,32,5,32,5,148,149,33,47,12,3,11,2,64,32,3,65,0,78,13,0,67,0,0,192,
      127,33,47,12,3,11,32,5,67,0,0,0,76,148,188,33,3,65,232,126,33,11,12,1,11,32,5,33,47,32,3,65,255,255,255,251,7,75,13,1,65,129,127,33,11,67,0,0,0,0,33,47,32,3,65,128,128,128,252,3,70,13,1,11,32,3,65,141,
      246,171,2,106,34,3,65,23,117,32,11,106,178,34,50,67,128,32,154,62,148,32,3,65,255,255,255,3,113,65,243,137,212,249,3,106,190,67,0,0,128,191,146,34,42,32,42,32,42,67,0,0,0,63,148,148,34,47,147,188,65,128,
      96,113,190,34,49,67,0,96,222,62,148,32,42,32,49,147,32,47,147,32,42,32,42,67,0,0,0,64,146,149,34,42,32,47,32,42,32,42,148,34,42,32,42,32,42,148,34,42,67,238,233,145,62,148,67,170,170,42,63,146,148,32,42,
      32,42,67,38,158,120,62,148,67,19,206,204,62,146,148,146,146,148,146,34,42,67,0,96,222,62,148,32,50,67,219,39,84,53,148,32,42,32,49,146,67,217,234,4,184,148,146,146,146,146,33,47,11,2,64,2,64,2,64,32,35,
      188,34,3,65,255,255,255,3,74,13,0,2,64,32,35,188,65,255,255,255,255,7,113,13,0,67,0,0,128,191,32,35,32,35,148,149,33,42,12,3,11,2,64,32,3,65,0,78,13,0,67,0,0,192,127,33,42,12,3,11,32,35,67,0,0,0,76,148,
      188,33,3,65,232,126,33,11,12,1,11,32,35,33,42,32,3,65,255,255,255,251,7,75,13,1,65,129,127,33,11,67,0,0,0,0,33,42,32,3,65,128,128,128,252,3,70,13,1,11,32,3,65,141,246,171,2,106,34,3,65,23,117,32,11,106,
      178,34,51,67,128,32,154,62,148,32,3,65,255,255,255,3,113,65,243,137,212,249,3,106,190,67,0,0,128,191,146,34,42,32,42,32,42,67,0,0,0,63,148,148,34,49,147,188,65,128,96,113,190,34,50,67,0,96,222,62,148,32,
      42,32,50,147,32,49,147,32,42,32,42,67,0,0,0,64,146,149,34,42,32,49,32,42,32,42,148,34,42,32,42,32,42,148,34,42,67,238,233,145,62,148,67,170,170,42,63,146,148,32,42,32,42,67,38,158,120,62,148,67,19,206,
      204,62,146,148,146,146,148,146,34,42,67,0,96,222,62,148,32,51,67,219,39,84,53,148,32,42,32,50,146,67,217,234,4,184,148,146,146,146,146,33,42,11,2,64,32,0,40,2,136,248,12,34,3,65,31,74,13,0,32,0,40,2,0,
      33,11,32,0,32,3,65,6,116,106,34,3,65,208,248,12,106,67,0,0,240,194,32,48,67,0,0,160,65,148,32,19,67,189,55,134,53,93,27,188,173,67,0,0,240,194,32,44,67,0,0,160,65,148,32,33,67,189,55,134,53,93,27,188,173,
      66,32,134,132,55,3,0,32,3,65,200,248,12,106,67,0,0,240,194,32,41,67,0,0,160,65,148,32,36,67,189,55,134,53,93,27,188,173,67,0,0,240,194,32,43,67,0,0,160,65,148,32,38,67,189,55,134,53,93,27,188,173,66,32,
      134,132,34,10,55,3,0,32,3,65,164,248,12,106,65,0,54,2,0,32,3,65,160,248,12,106,32,11,54,2,0,32,3,65,192,248,12,106,32,10,55,3,0,32,0,40,2,136,248,12,33,3,11,32,0,32,3,65,1,106,54,2,136,248,12,2,64,32,0,
      40,2,160,136,13,34,3,65,31,74,13,0,32,0,32,3,65,6,116,106,34,3,65,240,136,13,106,67,0,0,240,194,32,47,67,0,0,160,65,148,32,5,67,189,55,134,53,93,27,188,173,67,0,0,240,194,32,42,67,0,0,160,65,148,32,35,
      67,189,55,134,53,93,27,188,173,66,32,134,132,55,3,0,32,3,65,232,136,13,106,67,0,0,240,194,32,45,67,0,0,160,65,148,32,39,67,189,55,134,53,93,27,188,173,67,0,0,240,194,32,46,67,0,0,160,65,148,32,37,67,189,
      55,134,53,93,27,188,173,66,32,134,132,34,10,55,3,0,32,3,65,224,136,13,106,32,10,55,3,0,32,3,65,196,136,13,106,65,0,54,2,0,32,3,65,192,136,13,106,32,0,40,2,0,54,2,0,32,0,40,2,160,136,13,33,3,11,32,0,32,
      3,65,1,106,54,2,160,136,13,2,64,32,0,40,2,192,152,13,34,3,65,31,74,13,0,32,0,32,3,65,12,108,106,34,3,65,204,152,13,106,32,40,56,2,0,32,3,65,200,152,13,106,65,0,54,2,0,32,3,65,196,152,13,106,32,0,40,2,0,
      54,2,0,32,0,40,2,192,152,13,33,3,11,32,18,66,0,55,2,0,32,0,32,3,65,1,106,54,2,192,152,13,32,14,66,0,55,2,0,11,32,0,65,1,54,2,132,248,12,32,34,67,0,0,0,0,146,33,5,32,20,67,0,0,0,0,146,33,19,32,0,40,2,0,
      33,3,11,32,1,32,3,65,3,116,106,34,3,65,132,32,106,32,19,56,2,0,32,3,65,128,32,106,32,5,56,2,0,32,0,32,0,40,2,0,65,1,106,34,3,54,2,0,32,3,32,2,71,13,0,11,11,32,0,65,0,54,2,0,11,149,4,4,2,127,2,125,1,124,
      1,125,2,64,2,64,2,64,2,64,2,64,2,64,2,64,32,0,188,34,1,65,255,255,255,255,7,113,34,2,65,208,216,186,149,4,72,13,0,2,64,32,2,65,128,128,128,252,7,77,13,0,32,0,33,3,12,7,11,2,64,32,2,65,152,228,197,149,4,
      73,13,0,32,1,65,0,72,13,0,32,0,67,0,0,0,127,148,15,11,32,1,65,127,74,13,1,67,0,0,0,0,33,3,32,2,65,181,227,191,150,4,79,13,6,12,1,11,2,64,32,2,65,152,228,197,245,3,74,13,0,32,2,65,128,128,128,200,3,76,13,
      3,65,0,33,2,67,0,0,0,0,33,4,32,0,33,3,12,5,11,32,2,65,146,171,148,252,3,77,13,1,11,2,64,68,0,0,0,0,0,0,224,63,68,0,0,0,0,0,0,224,191,32,1,65,127,74,27,32,0,67,59,170,184,63,148,187,160,34,5,153,68,0,0,
      0,0,0,0,224,65,99,69,13,0,32,5,170,33,2,12,3,11,65,128,128,128,128,120,33,2,12,2,11,65,1,65,127,32,1,65,127,74,27,33,2,12,1,11,32,0,67,0,0,128,63,146,15,11,32,0,32,2,178,34,3,67,0,114,49,191,148,146,34,
      0,32,3,67,142,190,191,53,148,34,4,147,33,3,11,32,0,32,3,32,3,32,3,32,3,148,34,6,32,6,67,21,82,53,187,148,67,143,170,42,62,146,148,147,34,6,148,67,0,0,0,64,32,6,147,149,32,4,147,146,67,0,0,128,63,146,33,
      0,2,64,2,64,32,2,65,128,1,72,13,0,32,0,67,0,0,0,127,148,33,3,2,64,32,2,65,254,1,75,13,0,32,2,65,129,127,106,33,1,12,2,11,32,3,67,0,0,0,127,148,33,3,32,2,65,253,2,32,2,65,253,2,72,27,65,130,126,106,33,1,
      12,1,11,32,0,33,3,32,2,33,1,32,2,65,130,127,78,13,0,32,0,67,0,0,128,12,148,33,3,2,64,32,2,65,155,126,77,13,0,32,2,65,230,0,106,33,1,12,1,11,32,3,67,0,0,128,12,148,33,3,32,2,65,182,125,32,2,65,182,125,74,
      27,65,204,1,106,33,1,11,32,3,32,1,65,23,116,65,128,128,128,252,3,106,190,148,32,0,32,2,27,15,11,32,3,11,246,4,4,2,127,3,125,2,127,1,125,2,64,32,0,188,34,1,65,255,255,255,255,7,113,34,2,13,0,67,0,0,128,
      63,15,11,2,64,32,2,65,129,128,128,252,7,72,13,0,32,0,67,0,0,32,65,146,15,11,2,64,2,64,32,2,65,128,128,128,252,3,70,13,0,32,2,65,128,128,128,252,7,71,13,1,32,0,67,0,0,0,0,32,1,65,127,74,27,15,11,67,0,0,
      32,65,67,205,204,204,61,32,1,65,127,74,27,15,11,2,64,2,64,32,1,65,128,128,128,248,3,70,13,0,67,0,0,200,66,33,3,32,1,65,128,128,128,128,4,70,13,1,2,64,32,2,65,129,128,128,232,4,72,13,0,67,0,0,128,127,67,
      0,0,0,0,32,1,65,0,74,27,15,11,67,0,0,128,127,33,3,32,1,65,128,96,113,190,34,4,67,0,144,84,64,148,34,5,32,0,67,189,132,39,58,148,32,0,32,4,147,67,0,144,84,64,148,146,34,4,146,34,0,188,34,2,65,128,128,128,
      152,4,74,13,1,2,64,2,64,32,2,65,128,128,128,152,4,71,13,0,32,4,67,60,170,56,51,146,32,0,32,5,147,94,13,3,32,0,188,65,255,255,255,255,7,113,33,1,12,1,11,67,0,0,0,0,33,3,32,0,188,65,255,255,255,255,7,113,
      34,1,65,128,128,216,152,4,74,13,2,32,2,65,128,128,216,152,124,71,13,0,32,4,32,0,32,5,147,95,13,2,11,65,0,33,6,2,64,32,1,65,128,128,128,248,3,76,13,0,65,0,65,128,128,128,4,32,1,65,23,118,65,130,127,106,
      118,32,2,106,34,1,65,255,255,255,3,113,65,128,128,128,4,114,65,150,1,32,1,65,23,118,65,255,1,113,34,7,107,118,34,6,107,32,6,32,2,65,0,72,27,33,6,32,4,32,5,65,128,128,128,124,32,7,65,129,127,106,117,32,
      1,113,190,147,34,5,146,188,33,2,11,2,64,32,6,65,23,116,32,2,65,128,128,126,113,190,34,0,67,0,114,49,63,148,34,8,32,0,67,140,190,191,53,148,32,4,32,0,32,5,147,147,67,24,114,49,63,148,146,34,4,146,34,0,32,
      0,32,0,32,0,32,0,148,34,3,32,3,32,3,32,3,32,3,67,76,187,49,51,148,67,14,234,221,181,146,148,67,85,179,138,56,146,148,67,97,11,54,187,146,148,67,171,170,42,62,146,148,147,34,3,148,32,3,67,0,0,0,192,146,
      149,32,4,32,0,32,8,147,147,34,3,32,0,32,3,148,146,147,147,67,0,0,128,63,146,34,0,188,106,34,2,65,255,255,255,3,74,13,0,32,0,32,6,16,173,128,128,128,0,15,11,32,2,190,15,11,67,194,98,74,64,33,3,11,32,3,11,
      128,4,2,3,125,2,127,2,64,67,0,0,128,63,67,0,0,128,191,32,1,32,1,67,0,0,128,191,93,27,32,1,67,0,0,128,63,94,27,34,1,32,0,42,2,92,34,2,95,69,13,0,32,0,42,2,124,15,11,2,64,2,64,2,64,2,64,32,1,32,0,65,248,
      0,106,42,2,0,34,3,96,13,0,32,0,65,224,0,106,42,2,0,33,4,32,1,32,2,96,69,13,1,32,1,32,4,95,69,13,1,65,0,33,5,65,1,33,6,32,4,33,3,12,2,11,32,0,65,152,1,106,42,2,0,15,11,32,0,65,228,0,106,42,2,0,33,2,2,64,
      32,1,32,4,96,69,13,0,32,1,32,2,95,69,13,0,65,1,33,5,65,2,33,6,32,2,33,3,32,4,33,2,12,1,11,32,0,65,232,0,106,42,2,0,33,4,2,64,32,1,32,2,96,69,13,0,32,1,32,4,95,69,13,0,65,2,33,5,65,3,33,6,32,4,33,3,12,1,
      11,32,0,65,236,0,106,42,2,0,33,2,2,64,32,1,32,4,96,69,13,0,32,1,32,2,95,69,13,0,65,3,33,5,65,4,33,6,32,2,33,3,32,4,33,2,12,1,11,32,0,65,240,0,106,42,2,0,33,4,2,64,32,1,32,2,96,69,13,0,32,1,32,4,95,69,13,
      0,65,4,33,5,65,5,33,6,32,4,33,3,12,1,11,32,0,65,244,0,106,42,2,0,33,2,2,64,32,1,32,4,96,69,13,0,32,1,32,2,95,69,13,0,65,5,33,5,65,6,33,6,32,2,33,3,32,4,33,2,12,1,11,32,1,32,2,96,69,13,1,32,1,32,3,95,69,
      13,1,65,6,33,5,65,7,33,6,11,2,64,32,3,32,2,147,34,3,139,67,23,183,209,56,93,69,13,0,32,0,32,5,65,2,116,106,65,252,0,106,42,2,0,15,11,32,0,65,252,0,106,34,0,32,5,65,2,116,106,42,2,0,34,4,67,0,0,128,63,67,
      0,0,0,0,32,1,32,2,147,32,3,149,34,1,32,1,67,0,0,0,0,93,27,32,1,67,0,0,128,63,94,27,32,0,32,6,65,2,116,106,42,2,0,32,4,147,148,146,15,11,32,0,65,152,1,106,42,2,0,11,160,1,0,2,64,2,64,2,64,32,1,65,128,1,
      72,13,0,32,0,67,0,0,0,127,148,33,0,32,1,65,254,1,75,13,1,32,1,65,129,127,106,33,1,12,2,11,32,1,65,130,127,78,13,1,32,0,67,0,0,128,12,148,33,0,2,64,32,1,65,155,126,77,13,0,32,1,65,230,0,106,33,1,12,2,11,
      32,0,67,0,0,128,12,148,33,0,32,1,65,182,125,32,1,65,182,125,74,27,65,204,1,106,33,1,12,1,11,32,0,67,0,0,0,127,148,33,0,32,1,65,253,2,32,1,65,253,2,72,27,65,130,126,106,33,1,11,32,0,32,1,65,23,116,65,128,
      128,128,252,3,106,190,148,11,11,142,128,128,128,0,1,0,65,0,11,8,0,0,0,0,0,0,0,0,0,186,137,128,128,0,7,108,105,110,107,105,110,103,2,8,142,137,128,128,0,47,0,32,0,20,95,115,101,110,100,69,118,101,110,116,
      95,105,110,112,117,116,71,97,105,110,0,32,1,21,95,115,101,110,100,69,118,101,110,116,95,109,97,107,101,117,112,71,97,105,110,0,32,2,14,95,115,101,110,100,69,118,101,110,116,95,109,105,120,0,32,3,21,95,
      115,101,110,100,69,118,101,110,116,95,97,116,116,97,99,107,66,97,115,101,0,32,4,22,95,115,101,110,100,69,118,101,110,116,95,114,101,108,101,97,115,101,66,97,115,101,0,32,5,22,95,115,101,110,100,69,118,
      101,110,116,95,97,116,116,97,99,107,68,101,112,116,104,0,32,6,23,95,115,101,110,100,69,118,101,110,116,95,114,101,108,101,97,115,101,68,101,112,116,104,0,32,7,17,95,115,101,110,100,69,118,101,110,116,95,
      99,111,109,112,48,120,0,32,8,17,95,115,101,110,100,69,118,101,110,116,95,99,111,109,112,48,121,0,32,9,17,95,115,101,110,100,69,118,101,110,116,95,99,111,109,112,49,120,0,32,10,17,95,115,101,110,100,69,
      118,101,110,116,95,99,111,109,112,49,121,0,32,11,17,95,115,101,110,100,69,118,101,110,116,95,99,111,109,112,50,120,0,32,12,17,95,115,101,110,100,69,118,101,110,116,95,99,111,109,112,50,121,0,32,13,17,95,
      115,101,110,100,69,118,101,110,116,95,99,111,109,112,51,120,0,32,14,17,95,115,101,110,100,69,118,101,110,116,95,99,111,109,112,51,121,0,32,15,17,95,115,101,110,100,69,118,101,110,116,95,99,111,109,112,
      52,120,0,32,16,17,95,115,101,110,100,69,118,101,110,116,95,99,111,109,112,52,121,0,32,17,17,95,115,101,110,100,69,118,101,110,116,95,99,111,109,112,53,120,0,32,18,17,95,115,101,110,100,69,118,101,110,116,
      95,99,111,109,112,53,121,0,32,19,17,95,115,101,110,100,69,118,101,110,116,95,99,111,109,112,54,120,0,32,20,17,95,115,101,110,100,69,118,101,110,116,95,99,111,109,112,54,121,0,32,21,17,95,115,101,110,100,
      69,118,101,110,116,95,99,111,109,112,55,120,0,32,22,17,95,115,101,110,100,69,118,101,110,116,95,99,111,109,112,55,121,0,32,23,27,95,115,101,110,100,69,118,101,110,116,95,119,97,118,101,115,104,97,112,101,
      114,65,109,111,117,110,116,0,32,24,17,95,115,101,110,100,69,118,101,110,116,95,119,97,118,101,48,120,0,32,25,17,95,115,101,110,100,69,118,101,110,116,95,119,97,118,101,48,121,0,32,26,17,95,115,101,110,
      100,69,118,101,110,116,95,119,97,118,101,49,120,0,32,27,17,95,115,101,110,100,69,118,101,110,116,95,119,97,118,101,49,121,0,32,28,17,95,115,101,110,100,69,118,101,110,116,95,119,97,118,101,50,120,0,32,
      29,17,95,115,101,110,100,69,118,101,110,116,95,119,97,118,101,50,121,0,32,30,17,95,115,101,110,100,69,118,101,110,116,95,119,97,118,101,51,120,0,32,31,17,95,115,101,110,100,69,118,101,110,116,95,119,97,
      118,101,51,121,0,32,32,17,95,115,101,110,100,69,118,101,110,116,95,119,97,118,101,52,120,0,32,33,17,95,115,101,110,100,69,118,101,110,116,95,119,97,118,101,52,121,0,32,34,17,95,115,101,110,100,69,118,101,
      110,116,95,119,97,118,101,53,120,0,32,35,17,95,115,101,110,100,69,118,101,110,116,95,119,97,118,101,53,121,0,32,36,17,95,115,101,110,100,69,118,101,110,116,95,119,97,118,101,54,120,0,32,37,17,95,115,101,
      110,100,69,118,101,110,116,95,119,97,118,101,54,121,0,32,38,17,95,115,101,110,100,69,118,101,110,116,95,119,97,118,101,55,120,0,32,39,17,95,115,101,110,100,69,118,101,110,116,95,119,97,118,101,55,121,0,
      32,40,10,105,110,105,116,105,97,108,105,115,101,1,2,14,46,76,103,95,95,102,114,101,113,117,101,110,99,121,0,0,8,0,32,41,12,97,100,118,97,110,99,101,66,108,111,99,107,0,2,42,56,46,76,115,116,100,95,95,105,
      110,116,114,105,110,115,105,99,115,95,95,105,110,116,101,114,110,97,108,95,95,109,97,116,104,95,105,109,112,108,101,109,101,110,116,97,116,105,111,110,115,95,95,101,120,112,95,48,0,2,43,54,46,76,115,116,
      100,95,95,105,110,116,114,105,110,115,105,99,115,95,95,105,110,116,101,114,110,97,108,95,95,109,97,116,104,95,105,109,112,108,101,109,101,110,116,97,116,105,111,110,115,95,95,112,111,119,0,2,44,48,46,76,
      76,85,84,67,111,109,112,114,101,115,115,111,114,95,95,72,81,69,110,118,101,108,111,112,101,67,111,109,112,114,101,115,115,111,114,95,95,119,97,118,101,115,104,97,112,101,0,2,45,67,46,76,115,116,100,95,
      95,105,110,116,114,105,110,115,105,99,115,95,95,105,110,116,101,114,110,97,108,95,95,109,97,116,104,95,105,109,112,108,101,109,101,110,116,97,116,105,111,110,115,95,95,104,101,108,112,101,114,115,95,95,
      115,99,97,108,98,110,102,5,151,128,128,128,0,1,19,46,98,115,115,46,46,76,103,95,95,102,114,101,113,117,101,110,99,121,3,0,0,183,128,128,128,0,10,114,101,108,111,99,46,67,79,68,69,5,10,3,204,11,41,0,3,168,
      16,41,0,0,134,24,43,0,170,24,44,0,252,29,43,0,230,30,43,0,245,34,44,0,232,35,45,0,253,35,45,0,152,75,46,0,172,128,128,128,0,15,116,97,114,103,101,116,95,102,101,97,116,117,114,101,115,2,43,15,109,117,116,
      97,98,108,101,45,103,108,111,98,97,108,115,43,8,115,105,103,110,45,101,120,116,]);
  }
}
