<div class="cart-template">
  <div class="cart-header">
    <h1>Your Cart</h1>
    {% if cart.item_count > 0 %}
      <p class="cart-count-text">{{ cart.item_count }} 
        {%- if cart.item_count == 1 %} item{% else %} items{% endif -%}
      </p>
    {% endif %}
  </div>
  
  {% if cart.item_count > 0 %}
    <div class="cart-content">
      <div class="cart-items">
        {% for item in cart.items %}
          <div class="cart-item" data-line-item-key="{{ item.key }}">
            <div class="cart-item-image">
              {% if item.image %}
                <img src="{{ item.image | img_url: '200x200' }}" alt="{{ item.image.alt | escape }}">
              {% endif %}
            </div>
            
            <div class="cart-item-details">
              <h3>{{ item.product.title }}</h3>
              {% unless item.variant.title == 'Default Title' %}
                <p class="variant-title">{{ item.variant.title }}</p>
              {% endunless %}
              
              <div class="cart-item-price">
                {{ item.price | money }}
              </div>
            </div>
            
            <div class="cart-item-quantity">
              <div class="quantity-input">
                <button type="button" class="quantity-minus" data-line-item-key="{{ item.key }}">-</button>
                <input type="number" 
                       class="quantity-value" 
                       value="{{ item.quantity }}" 
                       min="0" 
                       data-line-item-key="{{ item.key }}">
                <button type="button" class="quantity-plus" data-line-item-key="{{ item.key }}">+</button>
              </div>
            </div>
            
            <div class="cart-item-total">
              {{ item.line_price | money }}
            </div>
            
            <button class="cart-item-remove" data-line-item-key="{{ item.key }}">
              <i class="fas fa-times"></i>
            </button>
          </div>
        {% endfor %}
      </div>
      
      <div class="cart-summary">
        <h2>Order Summary</h2>
        
        <div class="summary-row">
          <span>Subtotal</span>
          <span>{{ cart.total_price | money }}</span>
        </div>
        
        <div class="summary-row total">
          <span>Total</span>
          <span>{{ cart.total_price | money }}</span>
        </div>
        
        <form action="/cart" method="post" class="cart-actions">
          <textarea name="note" placeholder="Add a note to your order..." class="cart-note">{{ cart.note }}</textarea>
          
          <button type="submit" name="checkout" class="btn btn-primary btn-checkout">
            <i class="fas fa-lock"></i>
            Proceed to Checkout
          </button>
        </form>
        
        <a href="/collections/all" class="continue-shopping">
          <i class="fas fa-arrow-left"></i>
          Continue Shopping
        </a>
      </div>
    </div>
  {% else %}
    <div class="empty-cart">
      <i class="fas fa-shopping-cart"></i>
      <h2>Your cart is empty</h2>
      <p>Add some plugins to get started!</p>
      <a href="/collections/all" class="btn btn-primary">
        <i class="fas fa-rocket"></i>
        Shop Plugins
      </a>
    </div>
  {% endif %}
</div>

<style>
  .cart-template {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem;
  }
  
  .cart-header {
    text-align: center;
    margin-bottom: 3rem;
  }
  
  .cart-header h1 {
    font-family: 'Space Grotesk', sans-serif;
    font-size: 3rem;
    margin-bottom: 0.5rem;
  }
  
  .cart-count-text {
    color: var(--text-secondary);
  }
  
  .cart-content {
    display: grid;
    grid-template-columns: 1fr 400px;
    gap: 3rem;
  }
  
  .cart-item {
    display: grid;
    grid-template-columns: 100px 1fr auto auto auto;
    gap: 2rem;
    align-items: center;
    padding: 2rem;
    background: var(--card-bg);
    border: 1px solid var(--border-color);
    border-radius: 16px;
    margin-bottom: 1rem;
    position: relative;
  }
  
  .cart-item-image img {
    width: 100%;
    border-radius: 8px;
  }
  
  .cart-item-details h3 {
    font-size: 1.25rem;
    margin-bottom: 0.5rem;
  }
  
  .variant-title {
    color: var(--text-secondary);
    font-size: 0.875rem;
  }
  
  .cart-item-price {
    font-weight: 600;
    margin-top: 0.5rem;
  }
  
  .cart-item-total {
    font-size: 1.25rem;
    font-weight: 600;
    background: var(--primary-gradient);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
  }
  
  .cart-item-remove {
    position: absolute;
    top: 1rem;
    right: 1rem;
    background: none;
    border: none;
    color: var(--text-tertiary);
    cursor: pointer;
    font-size: 1.25rem;
    transition: color 0.3s ease;
  }
  
  .cart-item-remove:hover {
    color: #ff4365;
  }
  
  .cart-summary {
    background: var(--card-bg);
    border: 1px solid var(--border-color);
    border-radius: 20px;
    padding: 2rem;
    height: fit-content;
    position: sticky;
    top: 100px;
  }
  
  .cart-summary h2 {
    font-size: 1.5rem;
    margin-bottom: 2rem;
  }
  
  .summary-row {
    display: flex;
    justify-content: space-between;
    padding: 1rem 0;
    border-bottom: 1px solid var(--border-color);
  }
  
  .summary-row.total {
    border-bottom: none;
    font-size: 1.25rem;
    font-weight: 600;
    padding: 1.5rem 0;
  }
  
  .cart-note {
    width: 100%;
    padding: 1rem;
    background: rgba(255, 255, 255, 0.05);
    border: 1px solid var(--border-color);
    border-radius: 8px;
    color: var(--text-primary);
    resize: vertical;
    min-height: 80px;
    margin: 1.5rem 0;
  }
  
  .btn-checkout {
    width: 100%;
    justify-content: center;
    margin-bottom: 1rem;
  }
  
  .continue-shopping {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    color: var(--text-secondary);
    text-decoration: none;
    font-size: 0.875rem;
    transition: color 0.3s ease;
  }
  
  .continue-shopping:hover {
    color: var(--text-primary);
  }
  
  .empty-cart {
    text-align: center;
    padding: 6rem 2rem;
  }
  
  .empty-cart i {
    font-size: 6rem;
    color: var(--text-tertiary);
    margin-bottom: 2rem;
  }
  
  .empty-cart h2 {
    font-size: 2rem;
    margin-bottom: 1rem;
  }
  
  .empty-cart p {
    color: var(--text-secondary);
    margin-bottom: 2rem;
  }
  
  @media (max-width: 768px) {
    .cart-content {
      grid-template-columns: 1fr;
    }
    
    .cart-item {
      grid-template-columns: 80px 1fr;
      gap: 1rem;
    }
    
    .cart-item-quantity,
    .cart-item-total {
      grid-column: 2;
    }
    
    .cart-summary {
      position: static;
    }
  }
</style>

<script>
  // Cart quantity updates
  document.querySelectorAll('.quantity-minus, .quantity-plus').forEach(button => {
    button.addEventListener('click', function() {
      const lineItemKey = this.dataset.lineItemKey;
      const input = document.querySelector(`.quantity-value[data-line-item-key="${lineItemKey}"]`);
      let quantity = parseInt(input.value);
      
      if (this.classList.contains('quantity-minus')) {
        quantity = Math.max(0, quantity - 1);
      } else {
        quantity += 1;
      }
      
      updateCartQuantity(lineItemKey, quantity);
    });
  });
  
  // Direct quantity input
  document.querySelectorAll('.quantity-value').forEach(input => {
    input.addEventListener('change', function() {
      const lineItemKey = this.dataset.lineItemKey;
      const quantity = Math.max(0, parseInt(this.value) || 0);
      updateCartQuantity(lineItemKey, quantity);
    });
  });
  
  // Remove item
  document.querySelectorAll('.cart-item-remove').forEach(button => {
    button.addEventListener('click', function() {
      const lineItemKey = this.dataset.lineItemKey;
      updateCartQuantity(lineItemKey, 0);
    });
  });
  
  function updateCartQuantity(lineItemKey, quantity) {
    const data = {
      updates: {
        [lineItemKey]: quantity
      }
    };
    
    fetch('/cart/update.js', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(data)
    })
    .then(response => response.json())
    .then(data => {
      // Refresh the page to show updated cart
      window.location.reload();
    })
    .catch(error => {
      console.error('Error updating cart:', error);
    });
  }
</script>